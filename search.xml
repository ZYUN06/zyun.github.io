<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[译 | 轮播图可用性：为内容过载的网站设计高效的用户界面]]></title>
    <url>%2F2019%2F05%2F02%2F%E8%AF%91-%E8%BD%AE%E6%92%AD%E5%9B%BE%E5%8F%AF%E7%94%A8%E6%80%A7%EF%BC%9A%E4%B8%BA%E5%86%85%E5%AE%B9%E8%BF%87%E8%BD%BD%E7%9A%84%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1%E9%AB%98%E6%95%88%E7%9A%84%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[译 | 复选框与单选按钮的 12 个可用性问题]]></title>
    <url>%2F2019%2F05%2F02%2F%E5%A4%8D%E9%80%89%E6%A1%86%E4%B8%8E%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE%E7%9A%84-12-%E4%B8%AA%E5%8F%AF%E7%94%A8%E6%80%A7%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[原文：Checkboxes vs. Radio Buttons作者：Jakob Nielsen (2004-09-27)阅读时长：8m56s 摘要：何时使用复选框控件与何时使用单选按钮控件的用户界面设计指南。关于复选框与单选按钮的 12 个可用性问题。 我最近在一个网站的注册页面中遇到了下面的这个提示框。它至少存在 2 个设计上的错误。在进一步阅读之前，试试你能否找出来吧。 一个网站的注册页面 • &nbsp; 错误一是本文的主要焦点：这里本应使用单选按钮，却错误地使用了复选框。因为上面的两个选择是互斥的，所以这个页面应该提供给用户的是单选按钮，以限制用户准确地选择某一个选项。 • &nbsp; 错误二是这里先提出了两个问题，然后把它们放在了一个又大又冗长的提示框里。在这里，只用一个简短的问题会好很多：「好的，向我发送关于其他特色产品、解决方案、服务和教育机会的信息。」 • &nbsp; 好笑的是，对于单个问题来说，使用复选框是正确的，因为用户将回答「是」或「否」。来自电商网站用户测试报告的建议是，复选框默认不勾选，这样用户就必须主动点击它才能选择接收更多的消息。 何时使用哪个控件自 1984 年第一版《Inside Macintosh》问世以来，复选框和单选按钮的使用规则一直都是一样的。后续所有的 GUI 标准与 W3C 官方的 Web 标准都包含了与之相同的、这两个控件的定义。 当列表中有 2 个或多个互斥的选项，并且用户必须从中明确选择一个选项时，使用单选按钮。换而言之，单击未选中的单选按钮，将取消选中列表中先前已选中的其他任何按钮。 当有一系列的选项，并且用户可选择任意个数的选项（包括 0 个，1 个或多个）时，使用复选框。换而言之，列表中每一个复选框都与其他复选框相互独立，因此选中一个复选框不会取消选中其他复选框。 一个单独的复选框可用作用户可打开或关闭的单个选项。 听起来十分简单，对吧？ 然而，我却经常遇到错误使用单选按钮和复选框的网页。即使已经过了 20 年，还是值得再次提出这些设计准则。 其他设计准则 使用标准的视觉表现形式。复选框应该是一个小方框，选中时带有一个复选标记或一个 X。而单选按钮则应该是一个小圆圈，选中时，圆圈中有一个实心圆。 以组的视觉形式呈现一组选项，并将它与同一页面上的其他组明显区分开。上面的提示框案例就违反了这个原则，因为布局使两个复选框看起来像是单独的主题，而实际上它们是同一个主题的两个可选项。• &nbsp; 使用子标题将一长串的复选框按逻辑分解成不同的组，可使这些选项便于快速扫描，易于理解。这样做的风险在于，用户可能会将每个子组视为一组单独的选项，但这对于复选框来说并不一定是致命的──因为无论如何，每个复选框都是独立的选择。而相反地，单选按钮列表则必须是统一的，你不能使用子标题来分解它。 垂直排列你的列表，每一行仅放置一个选项。如果必须使用一行包含多个选项的水平布局，请确保把按钮和标签分隔开，以便清楚地知道哪个选项与哪个标签匹配。例如，下面这个列表，就很难明白哪个按钮是与选项四匹配的。 一个水平布局的单选按钮列表 复选框标签应使用正向、主动的措辞，以便明确当用户勾选复选框时将会发生什么。换句话说，避免使用譬如「不要向我发送电子邮件」的否定语态，因为这将意味着用户必须勾选这个复选框，以阻止某件事情的发生。• &nbsp; 使用清晰的复选框标签，以便用户了解勾选与不勾选这个复选框分别会发生什么。• &nbsp; 如果你无法做到这一点，最好使用两个单选按钮──一个用于打开这个功能，一个用于关闭它──并且为这两者写上明确的标签。 如果可能的话，使用单选按钮而不是下拉菜单。单选按钮具有较低的认知负荷，因为它使所有选项永久可见，以便用户可轻松地比较它们。对于那些难以进行精确的鼠标移动的用户，单选按钮也更容易操作。（有限的空间有时可能会迫使你违反这个准则，但请尽可能保持所有选项可见。） 始终为单选按钮列表提供一个默认选择。根据定义，单选按钮总是有且仅有一个选项被选中，因此不应呈现没有默认选择的情况。（相反地，复选框则通常默认不选中任何选项。）• &nbsp; 如果用户有可能需要避免做出选择，那么您应该为这个选择提供一个单选按钮，例如一个标签为「无」的单选按钮。为用户提供一个明确的、中性的可点击选项，比要求不从列表中进行选择的隐性行为要好，特别是因为后者违反了总是只选择一个选项的规则。 因为单选按钮总是只需要一个选项，所以要确保选项既全面又清晰。例如，在对年长用户的测试中，他们无法完成一个要求他们选择工作类型的表单，因为它没有提供一个「退休」的选项。如果无法做到全面，则需要提供一个标签为「其他」的选项，并辅以输入字段。 让用户通过点击按钮 / 复选框本身或它的标签来选择一个选项：根据费茨定律，点击目标越大越易于点击。在 HTML 表单中，通过使用「Label」元素对每个标签进行编码，可轻松实现这一点，就像我在上面的水平单选按钮示例中所展示的那样（点击单词「Four」可选中该选项）。（译者注：上面那个水平单选按钮的图片截自原文网页页面，原页面上是可交互的）。在对Flash 中基于 Web 的应用的测试中，我们发现，通过在可视点击区域以外增加一些像素来增大点击区域的话，可使用户的错误远远减少。（这种效果在 HTML 中很难实现，尽管一些 CSS 技巧可能会奏效。） 复选框和单选按钮只用于改变设置，而不是作为动作按钮来使某些事件发生。此外，在用户单击命令按钮（如标签为「确定」，或者「继续进行 XXX（XXX 为进程中的下一步）」）之前，这些更改的设置不会生效。• &nbsp; 如果用户点击了「后退」按钮，则对页面上的复选框和单选按钮所做的任何更改都应被取消，并恢复原有的设置。如果用户点击了「取消」按钮，相同的准则也是成立的（虽然导航网页并不需要「取消」按钮，因为「后退」按钮的作用是相同的）。• &nbsp; 如果用户点击「后退」按钮后，又点击了「前进」按钮，那这种情况按「撤销 - 重做」的顺序来理解是最合适的，这意味着控件的外观应该呈现用户的更改，就像用户从未点击过「后退」一样。在用户点击「确定」或其他相同的命令之前，这些更改仍然不会对后端起作用。 为什么这些准则很重要当我在坚持复选框和单选按钮的正确使用时，我是不是太挑剔了？不。遵循 GUI 标准和正确使用控件有着很重要的可用性原因。 最重要的是，遵循设计标准提高了用户预知控件的功能与操作方式的能力。当他们看到一个复选框列表时，他们知道可以选择多个选项。当他们看到一个单选按钮列表时，他们知道只能选择一个选项。（当然，不是每个用户都知道这一点，但大部分用户都知道，特别是自从 1984 年这成为一个设计标准以来。） 因为许多人都知道如何操作标准的 GUI 小部件，所以正确地使用这些元素可增强用户对技术的掌握感。相反地，违反这些标准则会使用户界面感觉很脆弱──就好像任何事情都可能在没有任何警告的情况下发生一样。譬如说，你猜想你在点击一个单选按钮后是不会立即产生任何影响的，所以你可以在做了一个选择之后、但点击「确定」之前重新考虑你的选择。在这种情况下，如果一个网站违反了这个标准，并且在你输入一个选择之后，意外地使你进入下一个页面，那这将令人感到不快。更糟糕的是，这促使你对在网站上其他地方录入表单时可能会发生的情况产生担心。 复选框和单选按钮最大的可用性问题来自那些含糊不清、具有误导性或者描述了普通用户无法理解的选项的标签。语境线索可缓解后一个问题，但最好还是对任何一组重要的交互控件进行用户测试。幸运的是，复选框和单选按钮都很容易使用纸质原型来进行测试，所以你不需要实现任何东西就可以查看用户是否理解这些标签、并正确使用这些小部件。 没有专业的交互设计师会犯在应该使用单选按钮时却使用复选框的错误。这两个控件之间的区别是任何交互设计课程中首先会教的东西之一。因此，还有正确使用小部件的最后一个理由：如果你不这样做，你将会被视为一个业余爱好者。 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>交互设计</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 单选按钮与下拉菜单的 7 个使用原则]]></title>
    <url>%2F2019%2F05%2F02%2F%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE%E4%B8%8E%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E7%9A%84-7-%E4%B8%AA%E4%BD%BF%E7%94%A8%E5%8E%9F%E5%88%99%2F</url>
    <content type="text"><![CDATA[原文：7 Rules of Using Radio Buttons vs Drop-Down Menus作者：Saadia Minhas (2018-05-06)阅读时长：3m43s 不管你正在使用移动应用还是基于网页的工具，表单都是用户界面中至关重要的一部分。同时，表单也是用户交互的最佳来源。用户通过表单录入、提供信息，系统则通过理解这些信息来满足用户需求。 输入控件、输入校验、错误处理、用户反馈等等，都是可用表单中的一些项目。 单选按钮和下拉菜单是其中两个非常重要的输入控件。当用户需要输入时，它们可以互换使用。然而，如果我们仔细研究这两个控件的可用性，很明显，它们都有各自特定的使用场景，以便用户更简单地选择给定的输入。 以下是基于这个可用性研究的一些使用原则，它们将有助于你在设计表单时决定使用哪个控件更合适。 使用单选按钮#1 当需要强调选项时下面是一些需要强调选项的情况：• &nbsp; 没有明确的默认选项或推荐选项• &nbsp; 希望用户阅读所有选项• &nbsp; 用户不熟悉这些选项，并且较少有机会甚至没有机会预知它们 当需要强调选项时 在上面这个例子中，使用下拉菜单并不是一个很好的方案，因为默认选项并没有提供关于其他选项的线索。 #2 当选项少于 5 个时选项较少时最好并排放置，以便：• &nbsp; 用户可轻松快速的浏览所有选项• &nbsp; 提供快速响应，而不是打开下拉菜单后再从多个选项中进行选择 选项较少时 如上面的例子所示，当用户需要从 2 至 4 个选项中进行选择时，使用单选按钮更合适。 #3 当选项之间需要进行明确的比较时可比较的选项最好并排放置，因为：• &nbsp; 用户可对所有选项一目了然，并轻松进行比较• &nbsp; 从下拉菜单中比较和确定选项需要耗费时间• &nbsp; 如果使用下拉菜单，那么用户每次需要检查已选项时，都必须再次打开下拉菜单对选项进行比较 当需要比较选项时 上面这个比较好的例子是，关于用户必须做出严肃决定的订阅计划的选择。 #4 当需要优先考虑可见性和快速响应时清晰的可见性及选项的可快速浏览对用户来说更容易理解。• &nbsp; 对于较长的表单，可更简单快捷地扫描并标记所需选项• &nbsp; 每次都点击下拉菜单去选择某个选项，会耗费很多时间 长表单──Survey Monkey Questionnaire 从上面例子可明显看出，所有可选项对用户可见的长表单提供了更好的用户体验。 使用下拉菜单#1 当默认选项是推荐选项时这种情况下，仅查看推荐选项使用户更容易做出选择，因为：• &nbsp; 显示所有选项将吸引用户的注意力• &nbsp; 不鼓励用户更改默认选项 默认推荐选项 在上面的例子中，用户基本不需要改变默认选项，所以没有必要显示所有的选项。 #2 当有大量相似的选项可选时当有大量相似选项时，推荐使用下拉菜单，因为：• &nbsp; 用户很容易预知这些选项• &nbsp; 用户没有必要并排查看所有选项 大量相似选项 #3 当选项超过 7 个时当选项个数较多时，并不适合并排显示，因为：• &nbsp; 如果一大堆选项并排放置，用户界面将变得杂乱。用户在查看时有可能会感到困惑。• &nbsp; 扫描大量的单选选项需要耗费时间 超过 7 个选项 此外，对于长下拉列表，提供文本输入框是一个不错的方法。用户在其中输入选项名称后，列表仅显示出过滤选项。这将使选择更轻松快捷。 输入选项来过滤列表 总结为提高表单的用户体验，提供正确的控件以便用户输入是非常重要的。由于大量的选项会使表单变得很长，如果用户需要额外点击来输入信息的话，这将变得十分枯燥。以上这些规则将帮助你决定在设计表单时使用哪个控件，单选按钮或者下拉菜单。 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 字符计数器的 6 项设计原则]]></title>
    <url>%2F2019%2F05%2F02%2F%E5%AD%97%E7%AC%A6%E8%AE%A1%E6%95%B0%E5%99%A8%E7%9A%84-6-%E9%A1%B9%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%2F</url>
    <content type="text"><![CDATA[原文：Character count design: some guidelines作者：Jimmy Breck-McKye (2012-05-30)阅读时长：7m22s 字符数限制在互联网产品中无处不在，尤其是在依赖于用户产生内容的应用中。尽管如此常见，字符数限制却总被设计得很糟糕。值得庆幸的是，通过遵循以下 6 个关于输入长度限制设计与字符计数器显示的简单原则，便可使输入受字符数限制的文本变得简单方便。 总的来说，有以下 6 个设计字符有限的文本域的主要准则： 避免对文本输入作字数限制 为字符数限制增加视觉提示 在字数到达限制之前显示字符计数器 允许用户在达到字数限制之后继续编辑文本 允许用户方便地查看所有文本内容，以决定哪些内容需要被删减 为用户的内容输入提供其他渠道 现在，我们依次来看这些原则。 首先，避免对文本输入作字数限制。由于技术或架构上的限制，我们经常被迫需要对输入字数作出限制，因此导致输入变得非常不方便。但除此之外，这些限制毫无必要。有时我们本可以重新设计界面来满足更长长度的文本输入，有时我们草率地对用户如何构建他们的文本作出假设，有时我们并未作深入思考就对字数作了限制。我们要多思考与探寻是否有限制用户之外的其他替代方案。 第二， 为字符数限制增加视觉提示。200 个字符有多长？您能想象得出来吗？300 个字符呢？40 个呢？抽象的数字对于人们来说并不重要，我们很难猜出一个特定的字符限制对于文本输入意味着什么。所以，我们需要为用户提供其他的提示以帮助他们更好的理解内容的最大输入长度，以及他们当前已输入的长度。 有一种方法是，设计尺寸合适的输入区域，以便粗略地表示允许输入的最长文本长度。虽然这很难做到绝对准确（因为 140 个字母「i」将比140 个字母「w」显示的行数更少），但这种方式可为用户提供一个直观的字符限制的感受。例如 Twitter，发帖输入框的尺寸就大致等于输入最大限制字数时的尺寸。 Twitter 的发帖输入框 另一个方法是，当用户的输入接近最大限制字数时，改变字符计数器的颜色。例如 Stack-exchange 网站的评论输入框，当评论字数逐渐增加，计数器从灰色变成金色，最后变成红色。 Stack-exchange 网站的评论输入框 第三，在达到最大字数限制之前，显示字符计数器。您一定不希望用户在提交内容时才发现字数超出限制了，因为这将迫使用户不得不重新思考他们已经输入的内容，甚至是其他他们已经计划好提交的内容的结构。从认知上来说，这将耗费非常大的成本。您一定也不希望用超出字数限制的错误提示来打扰用户，所以，最好从一开始就显示字符计数器。如果计数器使你的设计变得凌乱，可以考虑给它设置一个不显眼的样式，比如灰色，当用户输入更多文字时，逐渐增强它的显眼程度。 第四，允许用户超出字符限制，并且在超出之后进行编辑。有一些字符数限制的设计是，一旦用户输入的文字达到最大限制，就禁止输入更多的文字。这是一个非常糟糕的设计，原因有两个。第一，它打断了用户复制和粘贴的操作；第二，提炼和修改文字内容比在输入完整文字前进行编辑来得更容易。允许用户输入完整的文字内容可帮助用户记住页面上的主要概念，然后开始编辑他们的素材。 第五，方便用户清楚了解哪部分内容是需要被删减的。正如以上第 2 点所提到的，对于用户来说，一定数量的字符数在字数层面上究竟意味着什么是难以理解的。这就是为什么以其他的方式提示用户当前已超出限制的程度是非常重要的。调整输入区域的尺寸，以暗示可输入的内容数量，这是一种不错的方式。但另一种更好的方式是，高亮用户已输入的文本中超出字数限制的那部分。 如下图的例子中，超出字数限制的文字为红色，所以用户可以一目了然哪些内容是需要被删减的。同时，这里还将红色的错误提示信息与触发它的文本联系起来了。 超出字数限制的文字为红色 第六，为用户的内容提供其他的输入渠道。如果用户正在打破字符限制，那么很有可能他正在以一种不恰当的方式使用此输入区域。因此，可以使用字数限制的错误提示引导用户使用更适合他们的内容长度的渠道或者输入区域。 例如，在 Facebook 中，当用户发布过长的 Status 更新时，将会弹出错误对话框，建议用户使用长度不限制的 Notes 功能。这促使用户使用适合冗长日志的 Statuses 功能，而不是专用的日志系统。如果你的用户正在打破字符限制，仅仅是因为他们误解了某一功能的使用目的，那么这个方法将会有所帮助。 用自己的话总结一下，就是：1. 在对文本输入作字数限制前先考虑是不是有其他方案。字数限制，并不是一种很好的方式，你有可能并未对用户的这个输入行为作深入了解，就草率地决定了这个最大限制字数。 2. 为这个「最大限制字数」增加一些视觉提示。单纯地放一个数字「200」对用户来说是比较难理解的，他们并不知道 200 个字是什么概念。增加提示的方式：如，将输入框的初始高度设置为刚好输入最大限制字数时的高度；或者，当用户的输入逐渐接近最大限制字数时，逐步改变字符计数器的颜色。 3. 一开始就显示字符计数器，而不是等到用户的输入超过最大限制字数时才显示。当用户的输入超过最大限制字数时才显示字符计数器的话，用户可能需要重新思考和安排他们已经填好的内容，甚至可能因为这一个修改影响其他本来就已经准备好录入的内容。如果担心你的界面设计因为字符计数器显得杂乱，可以给它设置一个比较不显眼的颜色 (如灰色)，当用户输入更多字数时，再慢慢提高字符计数器的显眼程度。 4. 在用户的输入达到最大限制字数后，也要允许用户继续输入。有一些字符计数器是，当用户达到最大字数限制后，就禁止用户输入了。这是很糟糕的一种设计方式，首先，这样可能使用户复制粘贴的内容被截断；另外，在原本完整的文本内容上进行修改总是比在被截断所以不完整的内容上修改来得容易。 5. 当用户的输入超出最大限制字数时，让用户清晰地知道哪些内容是超出的。例如，第 2 点中，将输入框的初始高度设置为刚好输入最大限制字数时的高度，这样，用户就知道超出这个输入框的部分就是超出的，需要把内容删减到能在这个输入框内完整显示；另一个更好的方式是，将超出最大字数限制的那部分文本变为红色。 6. 如果用户输入的内容超出限定的最大字数，说明他们很可能正在以一种不恰当的方式使用这个输入框，这种情况下，可利用错误信息引导用户改用更适合他们想输入的内容的途径或文本框。 其他相关讨论：字符计数器应该放置在相应文本框的什么位置？ 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 只有不超过 5% 的用户会调整默认设置]]></title>
    <url>%2F2019%2F05%2F02%2F%E8%AF%91-%E5%8F%AA%E6%9C%89%E4%B8%8D%E8%B6%85%E8%BF%87-5-%E7%9A%84%E7%94%A8%E6%88%B7%E4%BC%9A%E8%B0%83%E6%95%B4%E9%BB%98%E8%AE%A4%E9%80%89%E9%A1%B9%2F</url>
    <content type="text"><![CDATA[原文：Do users change their settings?作者：Jared Spool (2011-09-14)阅读时长：4m15s 早在 PC 时代，我们就对「用户是如何使用软件设计师为他们的应用程序所设计的选项、控件和设置的」这个问题感兴趣了。我们想知道，在多大程度上，用户会自定义他们的应用程序。 为此，我们着手进行了一些试验。我们邀请了大量的用户将他们的 Microsoft Word 的设置文件发送给我们。当时，MS Word 将所有的设置存储在一个名称诸如 config.ini 的文件中，所以我们邀请用户们将这个文件存入硬盘中，并通过电子邮件发送给我们。于是，我们收到了几百份这样的邮件。 然后，我们写了一个程序来分析这些文件，对「有多少用户曾经更改过应用中的 150 多项设置以及他们更改的是哪些设置」进行统计。 我们的发现非常有趣。在我们调研的用户中，只有不到 5% 的用户更改了设置，超过 95% 的用户则保留了应用程序安装时的默认设置。 这令人非常惊讶，因为程序中有一些默认设置是非常重要的。例如，此应用有一个功能是，在你编辑文件的过程中为你自动保存文件，以防在系统或应用程序突然崩溃时丢失任何内容。而在我们分析调查的的版本中，这个功能是默认关闭的。用户必须手动打开它，才能使它生效。 所以，这就意味着，有 95% 的用户是在自动保存功能关闭的情况下使用此应用程序的。当我们对这些用户中的一部分人进行访问时，他们都告诉了我们同一个事情：他们认为 Microsoft 关闭这个功能肯定是有原因的，否则他们为什么要这么设置。还有一些用户告诉我们，「Microsoft 一定知道他们在做什么」。 我们再三思考了这个问题，并且对「将如此重要的一个功能设为默认关闭」的原因进行了猜想。我们猜想，之所以这么做或许是考虑到「用户使用的是软驱或者用户使用的硬盘空间较小运行较慢」，而自动保存会对性能造成影响，所以他们希望为最坏的情况做一些优化，而且，如果用户需要用到这个功能，他们自然会去打开它。 我们有朋友在 Microsoft Office 团队中工作，于是我们向他们询问了将这个功能默认设为关闭的原因，并且提出了我们关于性能优化的这个假设。但他们进行了解之后告诉我们，我们的假设是错的。 事实证明，在该版本中，将该功能默认关闭，并不是因为他们考虑到了用户的需求。相反的，这只是因为一个程序员决定将 config.ini 文件初始化。将一个文件初始化是一个又快工作量又小的工程，所以他就先这么做了，寄希望于之后会有人告诉他实际需要的默认设置应该是什么样的。但是结果并没有人这么做。 由于二进制中 0 代表关闭，所以「自动保存」以及其他一些功能，都被默认设为关闭。用户认为 Microsoft 一定是经过仔细考虑才这么设置的，但事实并非如此。 我们向参与调查的用户了解一些背景资料，比如他们的年龄与职业，以看看是否存在一些区别。但毫无例外，只有一类人几乎总是主动调整他们的设置，这类人就是程序员和设计师。他们会调整应用程序中 40%，甚至多达 80% 的选项。 谁能想到，程序员和设计师们喜欢自定义他们的应用程序。这也许正好就是他们选择这份职业的原因？ （顺便说一句，如果你是一个程序员或者设计师，那么你将和大部人不一样。你习惯于调整你所使用的应用程序 的设置，并不意味着你的用户也会这么做，除非他们也是程序员或设计师。） 在几年的时间里，我们采用不同的形式重复了这个试验。我们发现，用户几乎不调整他们的设置。 如果你的应用程序也有很多设置，你是否曾调查研究过你的用户是如何使用它们的呢？有多少用户调整过这些设置？他们是否仍保持这些选项为默认状态？你的设置界面是否解释了每个设置的含义，并且告知用户为何要调整这些设置？ 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二零一九年五月]]></title>
    <url>%2F2019%2F05%2F01%2F%E4%BA%8C%E9%9B%B6%E4%B8%80%E4%B9%9D%E5%B9%B4%E4%BA%94%E6%9C%88%2F</url>
    <content type="text"><![CDATA[# 2019.05.01 今天是 2019 年 5 月 1 号，我们的社会依然面临三大严峻问题。治疗胃溃疡的药，不良反应是，胃炎。抗过敏的药，注意事项是，过敏体质者慎用。缓解抑郁症的药，有增加自杀倾向的风险。 # 2019.05.02 今天是 2019 年 5 月 2 号，从朋友圈看当代中国青年的精神境况和生活状态。世界杯。创造 101。权力的游戏。热情一年不如一年。 # 2019.05.03 今天是 2019 年 5 月 3 号，在我的故乡，吉林延边二道白河。我看见过。雪往天空里飘。最后，落入银河。银河是白色的。]]></content>
      <categories>
        <category>碎碎念儿</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[历经九九八万五千六百七十一难，迎来互联网生涯新高！]]></title>
    <url>%2F2019%2F04%2F21%2F%E5%8E%86%E7%BB%8F%E4%B9%9D%E4%B9%9D%E5%85%AB%E4%B8%87%E4%BA%94%E5%8D%83%E5%85%AD%E7%99%BE%E4%B8%83%E5%8D%81%E4%B8%80%E9%9A%BE%EF%BC%8C%E8%BF%8E%E6%9D%A5%E4%BA%92%E8%81%94%E7%BD%91%E7%94%9F%E6%B6%AF%E6%96%B0%E9%AB%98%EF%BC%81%2F</url>
    <content type="text"><![CDATA[折腾了两天之后，我终于拥有自己的部落格啦！哈哈哈哈哈哈开心！快乐！满足！充满希望！（止不住的膨胀 谁能想到，这个普普通通的周末也许可能就是我这一生中用脑强度最大的两天了。在稀里糊涂地安装了 Git、Node.js、Xcode，新建了 repository，弄完了域名注册实名验证域名解析，各种注册各种设置，各种改样式，各种 hexo c、 hexo g、hexo s、hexo d，各种 error 各种 warning 之后，我终于迎来了自己的个人网站。 辛苦我自己了（高光时刻儿 。 虽然还很简单，但暂时还够用儿，其他的边用边学就好啦。还是要好好学习，好好写文章呐。 感恩 Hexo，感恩 GitHub，感恩互联网，感恩所有分享经验和想法的人儿吖（扑通一声跪下（感恩「简书」不让我改昵称改头像让我有了建站的小动机儿 。 Cowabunga！ 图片来源：动画《探险活宝》]]></content>
      <categories>
        <category>碎碎念儿</category>
      </categories>
  </entry>
</search>
