<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[译 | 界面设计中的「变化盲视」]]></title>
    <url>%2F2019%2F05%2F03%2F%E8%AF%91-%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E3%80%8C%E5%8F%98%E5%8C%96%E7%9B%B2%E8%A7%86%E3%80%8D%2F</url>
    <content type="text"><![CDATA[原文：Change Blindness in UX: Definition作者：Raluca Budiu (2018-09-13)阅读时长：9m42s 摘要：由于人类注意力的局限性，当网页缺乏强有力的线索时，网页中的重大变化可能会被忽略。 变化盲视的定义在可用性测试中，我们经常观察到，用户忽略了屏幕上的一些变化，而设计师却认为这些变化是显而易见、令人瞩目的。在可用性方面，如果您从事的是设计工作，那么您就知道要寻找什么，在哪里寻找它，它何时出现以及它意味着什么。因此，这对您来说是显而易见的，当您查看您自己的设计时，您不会错过一个重要信息或数据对象的出现。但用户经常这样。为什么？因为变化盲视，这是人类（和史前人类）感知的一个有百万年之久的事实，并且不太可能在短时间内消失。 那么什么是变化盲视呢？在阿尔弗雷德 · 希区柯克（Alfred Hitchcock）的《惊魂记》（Psycho，有史以来最著名的电影）中，侦探 Arbogast 看着 Norman Bate 的房子投射在漆黑无云的天空里。镜头回到侦探的脸上，并跟着他朝屋子走去。场景仍是黑暗的，但天空却突然布满了云彩。 不论天空纹理的变化是有意为之（或许是希区柯克对即将发生的事的微妙警告）还是只是一个连续性的错误，大多数观众都不会注意到它。在一个场景与下一个场景之间，动态影像经常会出现像这样细微的不一致，比如背景的变化，演员的服装、妆容或位置的变化，但这些在不同场景之间切换时发生的变化通常都会被忽略。 这种现象被称为「变化盲视」，并且超出了电影的范畴。它适用于通常情况下人们对场景的感知，不管是在屏幕上还是在现实生活中。变化盲视的作用非常强大：即便人们已被警告可能发生变化，场景中的变化也可能不被察觉。 定义：变化盲视指的是，当一个场景的变化发生在远离人们的关注焦点的区域时，人们倾向于忽略这些变化。 在心理学中，20 世纪 90 年代中期进行的一系列实验可能是对变化盲视最好的说明了。在这些实验中，参与者被要求观看一幅复杂场景的图像，时间为半秒；然后显示器空白了一小会儿，最后又出现相同的图像。然而，第二次显示画面时，一些细节被修改了，比如，一个对象改变了尺寸、颜色或者添加或移除了一个元素。实验参与者被要求识别这两幅图像中的变化。在其中一些研究中，人们多次循环查看这两个版本，直到他们察觉出这些变化。对许多人来说，要经过 20 或 40 次交替才能找出它们。 显示器的闪烁（一个场景，接着是空白屏幕，接着是看起来相同的场景）是变化盲视的一个重要组成部分。在电影中，场景的切换起到了闪烁的作用；另外，在与计算机交互时，闪烁则由用户按下按钮之后新页面（或 UI 元素）的加载引起。但事实证明，闪烁并不是绝对必须的，当用户眨眼或正在扫视（当她移动视线至屏幕上另一个区域）时，此时发生的场景变化也很容易导致变化盲视。 魔术师利用人类在眼睛移动时的变化盲视倾向：他们使用吸引注意力的装置来使观众的眼睛移动到那个位置，同时进行对他们的戏法至关重要的未观察到的动作。 为什么会发生变化盲视？变化盲视发生的最根本原因是我们注意力的局限性。任何复杂的场景都有着大量的细节，人们很难也无法高效地注意到所有这些细节。我们经常采取的方式就是走捷径。 变化对于人类来说一直都很重要，它可以传达与我们的环境相关的重要信息。自然界中的大多数变化都是由运动来实现的（除极少数比如变色龙的特例之外，一个物理对象无法在不涉及运动的情况下立即发生改变），并且，人类的周边视觉很容易察觉到运动。一旦人眼检测到周围的运动，他们就会寻找运动的来源，此时中心视觉开始起作用，并提供补充的、详细的信息。这种行为是我们野外生活的遗留物，在野外，任何运动都可能是捕食者正准备猎杀我们的信号。 当运动作为变化的提示线索比较微弱或者完全不存在时，就会产生变化盲视。当屏幕闪烁时，运动就被分解了，我们看到的是场景的两个静态版本。找出变化的唯一方法是，检查前后版本中所有相应的元素并进行比较。这项任务是很困难的，不仅因为检查场景中无数小细节是乏味的，而且我们对于场景先前版本的记忆也可能很差。事实上，我们很可能根本就没注意到那个场景中的大部分元素。 但变化盲视也可能发生在眼球运动过程中。换句话说，如果两个（可能运动暗示的变化）相互竞争──就像魔术表演中一样，一个变化通常会获胜并吸引眼球，但眼球运动阻止了对第二个变化的检测。这一原因在界面设计中尤为重要。 界面设计中的变化盲视在与用户界面的正常交互中，当一个新的元素（比如产品图片轮播中的不同图片或者下拉菜单中的内容）作为用户操作的结果出现在屏幕上，而屏幕上其它区域也同时发生变化时，常常产生变化盲视。用户预料中的变化的位置在于直接响应用户操作的那个可见的设计元素，于是用户朝那个方向移动视线──但实际上，变化分散在屏幕上多个不同的区域。 例如，当用户点击 Aldiko 的 Android 应用中的汉堡菜单时，他们预期的界面上的变化是与该操作相关的──即，新的元素将会在菜单附近区域显示。他们的视线会停留在那个区域，并且不太可能注意到屏幕右上角的操作溢出按钮已经被一个搜索图标所替代。 Android 上的 Aldiko：打开菜单时，屏幕右上角的控件被一个放大镜替代。搜索工具将一直不被注意到，因为，（1）人们会盯着展开的菜单，这是他们操作的直接结果；（2）他们期望屏幕上其它所有元素保持不变（就像他们与大多数用户界面交互时一样）。 在其他地方，我们曾讨论过为什么桌面端的搜索框不应该被一个搜索图标所替代；然而，在移动屏幕上，这种模式是更有用的，我们的研究表明，即使没有搜索框，放大镜工具也相当容易被发现。但是，如果搜索框在默认情况下不可见，那么当用户点击搜索图标时，文本输入框应该显示在其旁边（而不是屏幕上距其较远的区域），以确保人们不会错过它。 Texas A&amp;M 大学不仅用搜索图标来代替搜索框，而且还在距离搜索图标很远的位置显示搜索文本框。主页横幅的动画与搜索框的显示是具有竞争性的。 John Hopkins 大学也使用了一个动态的主图，并将搜索隐藏在一个图标下。但至少，它在搜索图标附近显示搜索框，并将动态的背景调暗，以降低动画的竞争性。 出现在页面顶部的半持久性导航栏或者浮动的按钮也存在不被发现的危险，因为页面的滚动常常会掩盖它们。例如，当用户向上滚动页面时，半持久性导航栏出现在屏幕顶部，希望人们会注意到这个导航栏，并从中选择一个选项，而不必向上滚动至页面最顶端。但不幸的是，页面的运动很容易掩盖导航栏的出现引起的运动，尤其是当导航栏的颜色与页面的颜色混合在一起时，就像下面 New York Times 的例子。 iPhone 上的 NYTimes：当他们开始向上滚动时，人们可能会忽略出现在屏幕顶部的半持久性导航栏，因为他们正专注于页面的滚动。一个加剧这种现象的因素是视觉效果上，导航栏与页面内容的差异不够明显。 Chicago Tribune 的移动网站也使用了一个半持久性导航栏，当人们开始向上滚动时，它就会出现在页面顶部。但是，在这个例子中，导航栏的视觉设计效果使它更突出了。 （我们的周边视觉负责识别运动和阴影。比起一个元素微妙地与页面其余部分混合在一起，并且未显著改变页面的阴影轮廓，当一个页面的阴影轮廓发生变化时──比如因为一个角落里出现了大块对比色──我们更容易注意到它的出现。） 还有很多其他方面的设计可能受变化盲视所影响──错误消息或其他通知、出现得太快的结果、或因此现象仍可能被忽略的变化的导航栏，正如我们在同个话题的相关文章中所讨论的那样。 如何避免界面设计中的变化盲视为了避免变化盲视，请对你的设计进行分析，以确定那些可能同时发生并且会分散彼此注意力的竞争性变化。以下是一些实践的技巧： 一次只做一个变化。在上面 Aldiko 的例子中，可将搜索放置在右上角，并始终可见。 将所有同时发生变化的元素归在一起，并放置在屏幕上同一个区域内，以确保该运动可吸引对所有这些元素的注意力。例如，Aldiko 设计中另一个简单的解决方案是，将搜索移到菜单中。（但请注意，将搜索隐藏在菜单中会严重影响其可发现性，并且可能仅适用于以浏览为主的网站。） 使用动画来表示变化，但避免在屏幕上使用过多互相竞争的动画，以免分散注意力。 将屏幕上未发生变化的区域调暗，以聚焦用户对变化的注意力。 如果你打算在用户滚动页面时向页面中添加浮动的元素，那么请将它们显示在用户的关注焦点附近（例如，在页面底部放置「返回顶部」按钮），并使用与页面其余部分形成对比的颜色。 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>NN/g</tag>
        <tag>用户体验</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 正确使用标签页]]></title>
    <url>%2F2019%2F05%2F03%2F%E8%AF%91-%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E6%A0%87%E7%AD%BE%E9%A1%B5%2F</url>
    <content type="text"><![CDATA[原文：Tabs, Used Right作者：Jakob Nielsen (2016-07-09)阅读时长：6m30s 摘要：遵循以下 12 个选项卡控件的设计指南，以区分选项卡和网站导航，并解决点击不确定性问题。 简单的 GUI 窗口小部件是网页中大多数功能的基本构件，但却很难找到正确使用所有对话控件的网站。即使是像单选按钮和复选框（右键在新标签页打开译文）这样简单的东西，也有一半的时间是被错误使用的。甚至我们都还没开始讲下拉菜单，这也是可怕的滥用。本文讨论的是另一个经常被滥用的设计元素：选项卡。（这里，我讨论的是页面内的选项卡，如下面的几个截屏示例所示。这些是你可以自己设计的选项卡，作为你的网站或基于 web 的应用程序的一部分。另一种不同类型的选项卡被用于浏览器框架，它允许用户在浏览器中同时打开多个页面。在本文中，我不讨论浏览器选项卡。） 选项卡可用性指南下面是使用选项卡的 12 个设计原则： 使用选项卡在同一上下文的视图之间切换，而不是导航到不同的区域。这是最重要的一点，因为在切换视图时保持原位不变是我们使用选项卡的首要原因。 按一定的逻辑将内容分到不同的选项卡下，这样，用户便能轻松预测到选择一个给定的选项卡后会看到什么内容。（卡片分类法是研究这种「mini-IA」问题的一种方法。如果你无法找到明确不同的分组，那么选项卡可能是管理你的内容的错误界面控件。） 当用户不需要同时查看多个选项卡中的内容时，才使用选项卡。如果用户确实需要比较不同选项卡下面的信息，那么不得不来回切换将会增加他们的短期记忆负担，增加认知负担和交互成本，并降低可用性，相比于把所有内容都放在一个大页面中的设计。 设计本质上平行的选项卡。如果选项卡明显不同，用户会将它们理解为网站导航。 Workday 的主页使用了选项卡控件来呈现它的服务和应用。第一个选项卡 About Workday 提供了公司的概况，而其他的选项卡描述了公司提供的服务。最好是移除 About Workday 这个选项卡，以保持选项卡的平行。 高亮显示当前选中的选项卡。确保高亮显示足够突出，以便人们可以辨别出哪个选项卡是选中的。 Ticketmaster 的选项卡控件通过去掉填充颜色来突出显示当前选中的选项卡（Just Announced），如果有至少 3 个选项卡，则可以使用这个方法。但如果只有 2 个选项卡，这将很难判断出哪个是选中的。 除了高亮显示，你还可以通过尺寸，加粗文字，加上图标或者使它显示在其他选项卡前方等方法来标记当前选中的选项卡。如上述例子所示，如果只有 2 个选项卡，那么这种附加的信号将非常重要。 未选中的选项卡应该清晰可见、可读，以提醒用户有其他的选项。如果非高亮显示的选项卡太融入于背景，那么用户可能永远都不会点击它们，也永远都不会发现那些隐藏的功能。 将当前选中的选项卡与它的内容区域联系起来，就好像您正在使用几个粘贴有选项卡的物理索引卡一样。这将强调当前正显示哪个面板，并在只有 2 个选项卡的时候，告诉用户哪个选项卡是被选中的。 Traveler 的选项卡控件中，选中的选项卡和面板区域使用了相同的颜色。这个设计加强了选项卡及其相关内容之间的联系，这也是支持使用反向高亮显示的原因之一。 编写简短的选项卡标签，并使用简单明了的语言，而不是自创的术语。选项卡标签通常为 1~2 个字。短标签更易于扫描；如果你需要更长的标签，则表明这些选项对于一个选项卡控件来说过于复杂了。 选项卡标签不要使用全部大写。因为更难阅读，所以全部大写基本不会是一个好方法。可读性对于单个、简短的单词来说并不重要，但，正如「主页可用性设计指南」中提到的，你应该选择一种大写的形式（无论是句型还是标题式大写），并坚持使用。 只使用一行选项卡。多行会造成 UI 元素的跳跃，破坏空间记忆，从而造成用户无法记住他们已访问过哪些选项卡。此外，多行也是过度复杂的一个症状；如果你需要超出一行的选项卡，那么你应该简化你的设计。 将一整行选项卡放置在选项卡面板的顶部，而不是旁边或者底部，否则用户会忽略它们。从视觉设计上看，选项卡控制的范围应该是显而易见的。打个比方，使用选项卡就像在一个老式卡片目录的抽屉里翻阅索引卡一样，因此用户必须能够一眼就看出是什么构成了一个「索引卡」（即选项卡面板）。 Reuter 主页上的市场部分，使用了边框来显示选项卡控制的范围。 选项卡的外观和作用应该总是一致的。一致性在 GUI 控件设计中很重要，因为它通过以下几种方式构建起用户对界面的掌控感： 可识别性。当一件东西看起来总是一样的时候，你就知道应该寻找什么，并且知道当你找到它时会看到什么。 可预测性。当一件东西总是以相同的方式运作时，你就可以知道当你触发它时会发生什么。 赋予权力。当你可以依赖于你过去对所有可用功能的了解时，你就可以轻松地进行一系列操作来实现你的目标。 效率。没有必要花费时间去学习新的东西或者担心特性不一致带来的影响。 总结在图形用户界面设计中，选项卡可能看起来是一个不起眼、无聊的控件。但是，如本文所示，在创建运行良好、易于使用、增强用户体验的选项卡时，存在许多特定的设计上的问题。 当使用分析技术对一个 UX 运行状况进行检查时，选项卡的设计问题是一个常见的调查结果。假设你正在对页面内的操作进行跟踪，你可能会发现，用户很少使用某些页面上的选项卡。检查你是否违反了本文中的任何一条设计准则。如果是的话，你很可能就是罪魁祸首，并且你可通过快速的 A/B 测试变成英雄，这个测试通常会显示重设计的选项卡的两次使用，以使其符合标准。 如果你遵循了本文中的设计准则，用户将知道如何使用你的选项卡，而无需进一步探索或进行易错的猜测。这也意味着他们可以将所有的时间和精力用于理解你在这些选项卡下提供的内容和功能。选项卡本身没有任何价值，但当它们不是吸引注意力而是促进用户对内容的访问时，它们将发挥重要的作用（在满足用户体验和业务目标方面）。 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>交互设计</tag>
        <tag>Web</tag>
        <tag>NN/g</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 网站上的面包屑导航：什么、何时与如何]]></title>
    <url>%2F2019%2F05%2F03%2F%E8%AF%91-%E7%BD%91%E7%AB%99%E4%B8%8A%E7%9A%84%E9%9D%A2%E5%8C%85%E5%B1%91%E5%AF%BC%E8%88%AA%EF%BC%9A%E4%BB%80%E4%B9%88%E3%80%81%E4%BD%95%E6%97%B6%E4%B8%8E%E5%A6%82%E4%BD%95%2F</url>
    <content type="text"><![CDATA[原文：Breadcrumbs For Web Sites: What, When and How作者：Nick Babich (2016-08-17)阅读时长：7m38s 面包屑导航（breadcrumbs 或 breadcrumb trail）是一个二级导航系统，用于显示用户在一个网站或 web app 中的位置。这个词来源于 Hansel 和 Gretel 的童话故事，故事中的主人公通过用面包屑制造的一串踪迹找到了回家的路。 与这个童话故事一样，访问者需要知道他们在网站层次结构中的位置，以便浏览到层次结构中更高级别的内容。在本文中，我们将探讨如何在网站上使用面包屑，并讨论一些将面包屑导航应用到您自己的网站的最佳实践。 面包屑导航越来越有用面包屑可用作有效的视觉辅助，指示用户在网站层次结构中的位置。此属性使面包屑成为用户获取上下文信息的主要来源，并帮助他们找到以下问题的答案： 我在哪里？面包屑告知访问者与整个网站层次结构相关的他们的位置。 我可以去哪里？面包屑可提高网站特定部分和页面的可寻性。网站的结构放在面包屑中比放菜单中更容易理解。 我应该去那里吗？面包屑传达内容价值，并鼓励浏览（例如，电子商务网站的访问者可能会访问一个产品页面，虽然该产品可能不是很匹配，但访问者可能希望浏览来自同一类别的其他产品）。反过来，这会降低网站整体的跳出率。 • &nbsp;减少操作次数在可用性方面，面包屑减少了网站访问者为了访问更高级别的页面而需要采取的操作的次数。访问者可使用面包屑来返回更高级别的页面，而无需使用浏览器的「后退」按钮或者网站的主导航。 • &nbsp;占用最小的空间一个紧凑的结构形式无需占用太多的页面空间，因为它只是横向的一行带有链接的文本。好处是它们在内容加载方面几乎没有负面影响。 • &nbsp;没有用户会在使用面包屑时遇到问题人们可能会忽略这个小小的设计元素，但他们从不会误解面包屑或者在操作它们时感到困难。 何时该使用面包屑导航确定一个网站是否会从面包屑中受益的好方法是，绘制站点地图或者表示网站导航结构的示意图，然后分析面包屑是否会提高用户在类别内和类别之间导航的能力： 当你有大量以严格的线性结构或者具有自定义类别的层次结构组织的内容（例如，可将其划分为可划分为更多子部分的部分）时，您应该使用面包屑。一个很好的场景是电子商务网站，其中各种各样的产品可按逻辑分为不同的类别。 对于不具有逻辑层次或分组的单级网站，不应使用面包屑。 面包屑导航的类型面包屑可以基于位置、路径或属性。 1. 基于位置的面包屑基于位置的面包屑代表着一个网站的结构。它可以帮助访问者理解和浏览网站具有多个级别（通常两个以上）的层次结构。对于从外部源（例如，搜索引擎结果页）进入网站更深层次的访问者来说，这种类型的面包屑具有非常大的支撑作用。 基于位置的面包屑导航。图片来源：marketingland 在下面的例子（来自 BestBuy）中，每一个文本链接都对应着一个比它右边的页面更高一级的页面。 来自 BestBuy 的基于位置的面包屑导航 2. 基于路径的面包屑基于路径的面包屑（也称作「历史记录」）显示了用户访问某个特定页面的整个路径。这种类型的面包屑链接通常是动态生成的。有时候，基于路径的面包屑很有帮助，但大多数时候，它会令人感到困惑──访问者通常会漫不经心地浏览，从一个页面跳到另一个页面。这样一个曲折的路径对于用户而言，并没有太大的帮助，而且很容易由浏览器中的「后退」按钮来替代。最后，对于那些直接到达网站中深层级页面的访问者来说，历史记录是没有用的。 下面是一个基于路径的面包屑导航的链接示例，它显示了导航到目标页面的两条路径。 基于路径的面包屑导航。图片来源：Oracle 3. 基于属性的面包屑基于属性的面包屑列出了可跳转至特定页面或最常见产品的类别──因为这种类型的面包屑对电子商务网站非常有用。这种面包屑有助于访问者理解产品之间的关系，并提供了一种不同的方式。 基于属性的面包屑导航。图片来源：marketingland 例如，在 TM Lewin 网站中，面包屑导航显示了某一个特定页面上的展示的所有项目的属性： 这个页面显示了所有的具有「Slim Fit」属性的西装。图片来源：T.M. Lewin 层次结构还是历史记录？根据经验法则，面包屑应该显示网站的层次结构，而不是用户的历史记录。因此，使用基于位置或基于属性的面包屑，而不是基于路径的面包屑。 面包屑的最佳实践在设计面包屑导航时，请记住以下几点： 1. 不要使用面包屑代替主导航面包屑导航应该被视为一个额外的功能，而不是取代有效的主导航菜单。请记住，这是一个便利功能；一个辅助导航方案；另一种可选择的在网站中导航的方式。 Apple 使用面包屑导航来支持主导航 2. 导航中不应包含当前页面的链接面包屑导航中的最后一项（用户当前的位置）是可选的──如果要显示它，请确保它是不可点击的。由于用户已经在此页面上，所以将当前页面的链接添加到面包屑导航中不具任何意义。 3. 使用分隔符面包屑导航中，用于分隔链接的最容易辨认的符号是「大于」符号（&gt;）。通常，「&gt;」符号用于表示层次结构，如「父类别 &gt; 子类别」格式中的一样。其他可使用的符号是指向右边的箭头（→），直角引号（»）和斜杠（/）。符号的选择取决于网站的美观程度和使用的面包屑类型： 图片来源：Dribbble 图片来源：Dribbble, Oleg Frolov 4. 选择适当的尺寸和间距在设计时请仔细考虑目标尺寸与边距。不同面包屑级别之间应该有足够的间距，否则人们使用起来可能会比较困难。但同时，面包屑又不应在页面中占据主导地位，因此它们应该不如主导航菜单突出。 5. 不要使它成为设计的焦点不要使用花哨的字体或者鲜艳的颜色，因为这样做将失去使用面包屑导航的意义。在设计面包屑的尺寸和样式时需要遵循的一条经验法则是，它不应该是进入页面时吸引用户注意力的第一项内容。 下面例子中的面包屑导航设计得还不错，但它太引人注目了，可能会分散访问者对主导航和主要内容的注意力。 图片来源：Dribbble Google 的面包屑导航看起来不花哨，但是用户可以轻松找到并使用它。 6. 不要在移动网站上使用面包屑如果您在使用移动设备时觉得需要使用面包屑来进行导航，那么您供移动设备使用的网站设计可能出了什么问题。极有可能是，对于移动设备所提供的特定类型的使用与环境而言，您的网站太复杂了（嵌套太深了）。为了解决这个问题，您应该首先考虑如何使它不那么复杂，所以面包屑甚至都不是讨论的重点。 总结面包屑所做的就是让访问者更容易在网站中进行浏览，前提是它的内容和总体结构具有意义。 这是为数不多的能够提高可用性和用户舒适度的简单方法之一。对于设计上仅占一行空间的控件来说，这已经足够了。 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>交互设计</tag>
        <tag>Web</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 轮播图可用性：为内容过载的网站设计高效的用户界面]]></title>
    <url>%2F2019%2F05%2F02%2F%E8%AF%91-%E8%BD%AE%E6%92%AD%E5%9B%BE%E5%8F%AF%E7%94%A8%E6%80%A7%EF%BC%9A%E4%B8%BA%E5%86%85%E5%AE%B9%E8%BF%87%E8%BD%BD%E7%9A%84%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1%E9%AB%98%E6%95%88%E7%9A%84%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[原文：Carousel Usability: Designing an Effective UI for Websites with Content Overload作者：Kara Pernice (2013-09-14)阅读时长：10m23s 摘要：轮播图允许多重内容占据同一个人人觊觎的空间。这可能会平息公司内讧，但是在或大或小的视窗中，人们通常都会直接滚动页面跳过轮播图。在用户界面中，静态的横幅图片或内容整合展示可能会是更好的解决方案。但如果轮播图就是你的主要元素，良好的导航和内容可以使它更高效。 随处可见的轮播图有很多种不同的 UI 元素，都可被视为轮播图。 例如，可点击的几张图片的幻灯片（如戴尔网站上的） 或者是，展示多个导航标志的动画（如 Nest 网站上的）。 但最普遍的类型是功能区域的轮播图（本文所讨论的），它通常具有以下特征： 出现在主页顶部 占据首屏大部分空间 在同一位置同时显示多个内容 提供一些指示（或导航），表明这个轮播图中有多个特色内容或多帧数 每一帧中都包含了图片和少量文本 包含了关于组织的品牌或使命、特色信息的内容，或由促销活动组成 轮播图最大的优点使用轮播图最大的好处在于，它允许多个内容占据主页上同一块主要区域，这有助于消除任何关于谁的内容最具价值的内部争论。另外一个好处是，使更多的信息显示在可视区域的顶部，因此人们有更大的机会真正注意到它们。 轮播图最大的缺点你无法指望人们会注意到网站或企业内部网上的轮播图中的信息。不管是在 30 英寸还是 3 英寸的显示器上查看内容，人们通常都会直接滚动页面跳过这些图像，并错过其中所有内容，或者至少错过除第一帧以外的其他内容。的确，有一些眼动研究和网络计量学表明某些轮播图获得了大量的眼光停留与点击量。但是，使用轮播图时最需要注意的是，人们经常会忽略它们，以及其中部分或全部内容。 第二个最重要的注意事项是，设计师将轮播图视为一组图片的合辑，而用户通常只关注他所看到的那个图片。从整体上来说，轮播图中的一组图片可以令人对一个组织的作用产生准确的印象。但如果一个用户只看到其中的一张图片，他很可能会对一个组织产生误解。当一张图片描述的是一些反常的事情，或与业务、章程相关性较弱的事情时，这个问题就经常发生。 主页横幅可成为你的网站的视觉主角吗？考虑使用主页横幅代替轮播图如今，多图片的轮播图已经取代了以前网络上随处可见的单个的「主页横幅」。但在某些情况下，成熟的 UI 替代品可能比比它年轻、充满活动的后代产物更适合。原因之一在于，设计师的态度。一个轮播图中有可供选择的多帧图片，所以有机会达成共识或抓住用户的注意力，知道这一点会给设计师一种错误的安全感。他们认为人们会看到轮播图中所有的图片，所以他们会选择一些低质量的粗劣图片，以期弥补信息量的问题。但如果一个设计师只能选择一张图片表达一个观点，他们可能更倾向于选择一些强有力和示范性的东西。这样一来，用户就可真正专注于一个图片，而不是将注意力分散在几个图片中。此外，一个静态的主页横幅比轮播的元素更不容易分散用户注意力，因此可提高人们用于发现站点中其他区域的全局导航的可见性。（附带一提的是，将主页横幅或轮播图中的任何重要信息也放在用户界面中的其他地方，是一个很好的方式，因为这样一来，与 IA 或页面进行交互的人们就有机会看到它。） BestBuy 网站的主页使用了一个主页横幅来展示促销文案「Labor Day Savings Event」，以及销售日期与一个鲜明的黄色动作按钮「Shop Now」。 使 Best Buy 的主页横幅变得有效的原因有以下几点：• &nbsp;电视机、笔记本电脑和冰箱的图片易于辨认，清晰地展示了正在出售的产品。这个主题图片是引人注意的、信息丰富的。• &nbsp;字体、颜色与全局导航和主页眉中的字体、颜色相匹配，所以主页横幅看起来是网站内容的一部分，而不是一个强势的广告。此外，这些特征都有助于传达 Best Buy 品牌，加强宣传他们每天售卖的产品。 轮播图的设计准则如果你决定使用轮播图作为你的主要视觉形式，可遵循以下准则来把它们做好。 1. 一个轮播图只包含 5 帧或 5 帧以下的图片，因为用户不太可能会查看超过 5 帧。在移动设备上滑动浏览多帧图片是很费力的，当帧数超过 5 帧时，用户将很难辨别他们已经浏览过的图片的主题。同时，限制帧数将有助于用户发现内容，并在轮播图中再次找到它。 2. 使用简洁清晰、与组织宗旨一致的文案和图片。阅读字体太小的文本与辨认尺寸过小的图片是很困难的，尤其是在移动设备上。把一个大尺寸、高密度的图片塞进一个小区域中是不合适的。文案与图片越清晰，用户就越有可能注意到并理解其中表达的含义。 Corning Museum of Glass 使用引人注目的图片与高度相关的文案，这些都符合博物馆的工作性质。 Corning Museum of Glass 使用滑动手风琴来显示丰富的图片。 3. 提示用户轮播图中有多少帧图片，以及当前图片所在帧数位置，以提升用户的控制感。 Coldwell Banker 是我们内部网设计 2018 年年度竞赛的 10 个获胜者之一。他们内部网的轮播图设计清晰地展示了重要的信息：一共有 5 帧，每一帧的内容都是必需的，并且很容易识别出哪一帧是当前选中的。 Delta 使选中的点（在屏幕截图的底部）比其他两个点大，但是尺寸差别太细微了，所以不起作用。(给那些辨别不出来的朋友：中间那个是选中的，更大的。) 4. 使用易于理解和识别的图标与链接。导航控件旨在帮助人们识别选项，并在看到主框架中的内容后重新调用它们。例如，用户无法猜测一个数字或一个点点击后会显示什么，但可能记住绿色背景与关于环境的文章相关。在移动设备上，点是特别糟糕的提示，因为人们通常不会注意到它们（而且它们在 Android 比在 iOS 中更不标准）。 5. 确保导航控件在轮播图内显示，而不是在轮播图下方或者通过折叠分开来。这个设计有助于避免大型或小型显示器上的问题。 IBM 提供了一个引人注目的轮播图，轮播中有可点击的图片按钮，但按钮很小，并且按钮上没有描述性的文案。 在 iPhone 上查看时，Shining Star Therapy 网站上的轮播控件被截断了。这种出血效果比完全不显示控件好，但如果能看到完整的控件更好。 6. 如果为每一帧提供一个导航按钮（而不是用于滚动的箭头），请确保每个按钮看起来是不一样的，并且代表所在的那帧。John Deere 的主页提供了带有文字的图片作为按钮，并且显示在轮播图之内，这些都发挥了很大的作用。（同时，它还有可向前向后切换轮播图的箭头。）然而，它的文本非常小，难以阅读，并且对于分配给它们的小空间而言，这些用作按钮的图片过于密集了。 7. 使用足够大的链接与按钮，以便于识别和点击。尺寸小、紧挨着或显示在一个复杂背景上的按钮，将不容易被注意到或点击。 在 Roku 网站上，当所在帧背景为浅色时，轮播图左右侧的箭头很容易被注意到与点击，但是在背景比较复杂的帧中，它们就不够明显了。 滚动后的 Roku 网站。 自动轮播在帧之间自动轮播可引导人们浏览信息。但有些情况下，不推荐使用自动轮播。 如果是以下情况，请勿使用自动轮播：• &nbsp; 你不确定能否把握好轮播时长，以便大多数人在指定的时间内阅读并吸收轮播图中的内容。若轮播得太快，用户将无法读取信息，这对他们来说是令人沮丧的，对于试图突出重点的组织来说也是不好的。若轮播得太慢，则当它们动起来时，用户会对此感到惊讶。• &nbsp; 你的内容与广告相似。用户倾向于忽略看起来像广告的动画（如果他们并没有购物的心态）。我们的眼球追踪研究表明，动画广告的浏览率仅为 27%。 自动轮播的建议• &nbsp;不要在移动设备上使用自动轮播，因为：1. 它降低了页面的加载速度；2. 因为页面很短，用户通常会快速滚动，所以当轮播图切换时，用户可能正往下看，并忽略这个变化。• &nbsp;通过测试得出正确的轮播时长，或者至少估计用户阅读文本和处理图像需要的平均时间。我们以每秒 3 个单词为准则。• &nbsp;不要停在最后一帧。继续循环轮播（并显示所选的帧）。 静态（非自动轮播）的轮播图建议确保对轮播图感兴趣的用户能意识到除了当前显示的图像、内容外还有其他内容。提供清晰的视觉元素，以代表还有更多内容，比如： • &nbsp; 导航链接和图标（如上所述）• &nbsp; 切断，或者使图片“出血”，并显示下一个图片的一部分。 Windows 8 上的 Skyscanner app 将（右侧的）页面内容截断，以表明还有更多内容。 总结如果你正在使用轮播图，以期人们可以看到多种多样的内容，要记住大部分用户只会注意到第一帧，甚至全部都不会注意到。因此，请确保那些重要的内容也被谨慎地放置在 IA 网站上的其他页面中。考虑使用静态的轮播图或主页横幅，而不是自动轮播的图片。此外，在任何轮播图的导航中，都要确保按钮和链接是清晰的，足够大、易于理解和点击的，并且当前选中的那一帧的按钮应该显示为选中的状态。这样，你将创造出一种奇妙的愉悦感，而不是一个恐怖屋。 相关文章：主页横幅的最佳实践为终端用户设计主页轮播图的 10 个要求 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>交互设计</tag>
        <tag>Web</tag>
        <tag>NN/g</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 复选框与单选按钮的 12 个可用性问题]]></title>
    <url>%2F2019%2F05%2F02%2F%E5%A4%8D%E9%80%89%E6%A1%86%E4%B8%8E%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE%E7%9A%84-12-%E4%B8%AA%E5%8F%AF%E7%94%A8%E6%80%A7%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[原文：Checkboxes vs. Radio Buttons作者：Jakob Nielsen (2004-09-27)阅读时长：8m56s 摘要：何时使用复选框控件与何时使用单选按钮控件的用户界面设计指南。关于复选框与单选按钮的 12 个可用性问题。 我最近在一个网站的注册页面中遇到了下面的这个提示框。它至少存在 2 个设计上的错误。在进一步阅读之前，试试你能否找出来吧。 一个网站的注册页面 • &nbsp; 错误一是本文的主要焦点：这里本应使用单选按钮，却错误地使用了复选框。因为上面的两个选择是互斥的，所以这个页面应该提供给用户的是单选按钮，以限制用户准确地选择某一个选项。 • &nbsp; 错误二是这里先提出了两个问题，然后把它们放在了一个又大又冗长的提示框里。在这里，只用一个简短的问题会好很多：「好的，向我发送关于其他特色产品、解决方案、服务和教育机会的信息。」 • &nbsp; 好笑的是，对于单个问题来说，使用复选框是正确的，因为用户将回答「是」或「否」。来自电商网站用户测试报告的建议是，复选框默认不勾选，这样用户就必须主动点击它才能选择接收更多的消息。 何时使用哪个控件自 1984 年第一版《Inside Macintosh》问世以来，复选框和单选按钮的使用规则一直都是一样的。后续所有的 GUI 标准与 W3C 官方的 Web 标准都包含了与之相同的、这两个控件的定义。 当列表中有 2 个或多个互斥的选项，并且用户必须从中明确选择一个选项时，使用单选按钮。换而言之，单击未选中的单选按钮，将取消选中列表中先前已选中的其他任何按钮。 当有一系列的选项，并且用户可选择任意个数的选项（包括 0 个，1 个或多个）时，使用复选框。换而言之，列表中每一个复选框都与其他复选框相互独立，因此选中一个复选框不会取消选中其他复选框。 一个单独的复选框可用作用户可打开或关闭的单个选项。 听起来十分简单，对吧？ 然而，我却经常遇到错误使用单选按钮和复选框的网页。即使已经过了 20 年，还是值得再次提出这些设计准则。 其他设计准则 使用标准的视觉表现形式。复选框应该是一个小方框，选中时带有一个复选标记或一个 X。而单选按钮则应该是一个小圆圈，选中时，圆圈中有一个实心圆。 以组的视觉形式呈现一组选项，并将它与同一页面上的其他组明显区分开。上面的提示框案例就违反了这个原则，因为布局使两个复选框看起来像是单独的主题，而实际上它们是同一个主题的两个可选项。• &nbsp; 使用子标题将一长串的复选框按逻辑分解成不同的组，可使这些选项便于快速扫描，易于理解。这样做的风险在于，用户可能会将每个子组视为一组单独的选项，但这对于复选框来说并不一定是致命的──因为无论如何，每个复选框都是独立的选择。而相反地，单选按钮列表则必须是统一的，你不能使用子标题来分解它。 垂直排列你的列表，每一行仅放置一个选项。如果必须使用一行包含多个选项的水平布局，请确保把按钮和标签分隔开，以便清楚地知道哪个选项与哪个标签匹配。例如，下面这个列表，就很难明白哪个按钮是与选项四匹配的。 一个水平布局的单选按钮列表 复选框标签应使用正向、主动的措辞，以便明确当用户勾选复选框时将会发生什么。换句话说，避免使用譬如「不要向我发送电子邮件」的否定语态，因为这将意味着用户必须勾选这个复选框，以阻止某件事情的发生。• &nbsp; 使用清晰的复选框标签，以便用户了解勾选与不勾选这个复选框分别会发生什么。• &nbsp; 如果你无法做到这一点，最好使用两个单选按钮──一个用于打开这个功能，一个用于关闭它──并且为这两者写上明确的标签。 如果可能的话，使用单选按钮而不是下拉菜单。单选按钮具有较低的认知负荷，因为它使所有选项永久可见，以便用户可轻松地比较它们。对于那些难以进行精确的鼠标移动的用户，单选按钮也更容易操作。（有限的空间有时可能会迫使你违反这个准则，但请尽可能保持所有选项可见。） 始终为单选按钮列表提供一个默认选择。根据定义，单选按钮总是有且仅有一个选项被选中，因此不应呈现没有默认选择的情况。（相反地，复选框则通常默认不选中任何选项。）• &nbsp; 如果用户有可能需要避免做出选择，那么您应该为这个选择提供一个单选按钮，例如一个标签为「无」的单选按钮。为用户提供一个明确的、中性的可点击选项，比要求不从列表中进行选择的隐性行为要好，特别是因为后者违反了总是只选择一个选项的规则。 因为单选按钮总是只需要一个选项，所以要确保选项既全面又清晰。例如，在对年长用户的测试中，他们无法完成一个要求他们选择工作类型的表单，因为它没有提供一个「退休」的选项。如果无法做到全面，则需要提供一个标签为「其他」的选项，并辅以输入字段。 让用户通过点击按钮 / 复选框本身或它的标签来选择一个选项：根据费茨定律，点击目标越大越易于点击。在 HTML 表单中，通过使用「Label」元素对每个标签进行编码，可轻松实现这一点，就像我在上面的水平单选按钮示例中所展示的那样（点击单词「Four」可选中该选项）。（译者注：上面那个水平单选按钮的图片截自原文网页页面，原页面上是可交互的）。在对Flash 中基于 Web 的应用的测试中，我们发现，通过在可视点击区域以外增加一些像素来增大点击区域的话，可使用户的错误远远减少。（这种效果在 HTML 中很难实现，尽管一些 CSS 技巧可能会奏效。） 复选框和单选按钮只用于改变设置，而不是作为动作按钮来使某些事件发生。此外，在用户单击命令按钮（如标签为「确定」，或者「继续进行 XXX（XXX 为进程中的下一步）」）之前，这些更改的设置不会生效。• &nbsp; 如果用户点击了「后退」按钮，则对页面上的复选框和单选按钮所做的任何更改都应被取消，并恢复原有的设置。如果用户点击了「取消」按钮，相同的准则也是成立的（虽然导航网页并不需要「取消」按钮，因为「后退」按钮的作用是相同的）。• &nbsp; 如果用户点击「后退」按钮后，又点击了「前进」按钮，那这种情况按「撤销 - 重做」的顺序来理解是最合适的，这意味着控件的外观应该呈现用户的更改，就像用户从未点击过「后退」一样。在用户点击「确定」或其他相同的命令之前，这些更改仍然不会对后端起作用。 为什么这些准则很重要当我在坚持复选框和单选按钮的正确使用时，我是不是太挑剔了？不。遵循 GUI 标准和正确使用控件有着很重要的可用性原因。 最重要的是，遵循设计标准提高了用户预知控件的功能与操作方式的能力。当他们看到一个复选框列表时，他们知道可以选择多个选项。当他们看到一个单选按钮列表时，他们知道只能选择一个选项。（当然，不是每个用户都知道这一点，但大部分用户都知道，特别是自从 1984 年这成为一个设计标准以来。） 因为许多人都知道如何操作标准的 GUI 小部件，所以正确地使用这些元素可增强用户对技术的掌握感。相反地，违反这些标准则会使用户界面感觉很脆弱──就好像任何事情都可能在没有任何警告的情况下发生一样。譬如说，你猜想你在点击一个单选按钮后是不会立即产生任何影响的，所以你可以在做了一个选择之后、但点击「确定」之前重新考虑你的选择。在这种情况下，如果一个网站违反了这个标准，并且在你输入一个选择之后，意外地使你进入下一个页面，那这将令人感到不快。更糟糕的是，这促使你对在网站上其他地方录入表单时可能会发生的情况产生担心。 复选框和单选按钮最大的可用性问题来自那些含糊不清、具有误导性或者描述了普通用户无法理解的选项的标签。语境线索可缓解后一个问题，但最好还是对任何一组重要的交互控件进行用户测试。幸运的是，复选框和单选按钮都很容易使用纸质原型来进行测试，所以你不需要实现任何东西就可以查看用户是否理解这些标签、并正确使用这些小部件。 没有专业的交互设计师会犯在应该使用单选按钮时却使用复选框的错误。这两个控件之间的区别是任何交互设计课程中首先会教的东西之一。因此，还有正确使用小部件的最后一个理由：如果你不这样做，你将会被视为一个业余爱好者。 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>交互设计</tag>
        <tag>Web</tag>
        <tag>NN/g</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 单选按钮与下拉菜单的 7 个使用原则]]></title>
    <url>%2F2019%2F05%2F02%2F%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE%E4%B8%8E%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E7%9A%84-7-%E4%B8%AA%E4%BD%BF%E7%94%A8%E5%8E%9F%E5%88%99%2F</url>
    <content type="text"><![CDATA[原文：7 Rules of Using Radio Buttons vs Drop-Down Menus作者：Saadia Minhas (2018-05-06)阅读时长：3m43s 不管你正在使用移动应用还是基于网页的工具，表单都是用户界面中至关重要的一部分。同时，表单也是用户交互的最佳来源。用户通过表单录入、提供信息，系统则通过理解这些信息来满足用户需求。 输入控件、输入校验、错误处理、用户反馈等等，都是可用表单中的一些项目。 单选按钮和下拉菜单是其中两个非常重要的输入控件。当用户需要输入时，它们可以互换使用。然而，如果我们仔细研究这两个控件的可用性，很明显，它们都有各自特定的使用场景，以便用户更简单地选择给定的输入。 以下是基于这个可用性研究的一些使用原则，它们将有助于你在设计表单时决定使用哪个控件更合适。 使用单选按钮#1 当需要强调选项时下面是一些需要强调选项的情况：• &nbsp; 没有明确的默认选项或推荐选项• &nbsp; 希望用户阅读所有选项• &nbsp; 用户不熟悉这些选项，并且较少有机会甚至没有机会预知它们 当需要强调选项时 在上面这个例子中，使用下拉菜单并不是一个很好的方案，因为默认选项并没有提供关于其他选项的线索。 #2 当选项少于 5 个时选项较少时最好并排放置，以便：• &nbsp; 用户可轻松快速的浏览所有选项• &nbsp; 提供快速响应，而不是打开下拉菜单后再从多个选项中进行选择 选项较少时 如上面的例子所示，当用户需要从 2 至 4 个选项中进行选择时，使用单选按钮更合适。 #3 当选项之间需要进行明确的比较时可比较的选项最好并排放置，因为：• &nbsp; 用户可对所有选项一目了然，并轻松进行比较• &nbsp; 从下拉菜单中比较和确定选项需要耗费时间• &nbsp; 如果使用下拉菜单，那么用户每次需要检查已选项时，都必须再次打开下拉菜单对选项进行比较 当需要比较选项时 上面这个比较好的例子是，关于用户必须做出严肃决定的订阅计划的选择。 #4 当需要优先考虑可见性和快速响应时清晰的可见性及选项的可快速浏览对用户来说更容易理解。• &nbsp; 对于较长的表单，可更简单快捷地扫描并标记所需选项• &nbsp; 每次都点击下拉菜单去选择某个选项，会耗费很多时间 长表单──Survey Monkey Questionnaire 从上面例子可明显看出，所有可选项对用户可见的长表单提供了更好的用户体验。 使用下拉菜单#1 当默认选项是推荐选项时这种情况下，仅查看推荐选项使用户更容易做出选择，因为：• &nbsp; 显示所有选项将吸引用户的注意力• &nbsp; 不鼓励用户更改默认选项 默认推荐选项 在上面的例子中，用户基本不需要改变默认选项，所以没有必要显示所有的选项。 #2 当有大量相似的选项可选时当有大量相似选项时，推荐使用下拉菜单，因为：• &nbsp; 用户很容易预知这些选项• &nbsp; 用户没有必要并排查看所有选项 大量相似选项 #3 当选项超过 7 个时当选项个数较多时，并不适合并排显示，因为：• &nbsp; 如果一大堆选项并排放置，用户界面将变得杂乱。用户在查看时有可能会感到困惑。• &nbsp; 扫描大量的单选选项需要耗费时间 超过 7 个选项 此外，对于长下拉列表，提供文本输入框是一个不错的方法。用户在其中输入选项名称后，列表仅显示出过滤选项。这将使选择更轻松快捷。 输入选项来过滤列表 总结为提高表单的用户体验，提供正确的控件以便用户输入是非常重要的。由于大量的选项会使表单变得很长，如果用户需要额外点击来输入信息的话，这将变得十分枯燥。以上这些规则将帮助你决定在设计表单时使用哪个控件，单选按钮或者下拉菜单。 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 字符计数器的 6 项设计原则]]></title>
    <url>%2F2019%2F05%2F02%2F%E5%AD%97%E7%AC%A6%E8%AE%A1%E6%95%B0%E5%99%A8%E7%9A%84-6-%E9%A1%B9%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%2F</url>
    <content type="text"><![CDATA[原文：Character count design: some guidelines作者：Jimmy Breck-McKye (2012-05-30)阅读时长：7m22s 字符数限制在互联网产品中无处不在，尤其是在依赖于用户产生内容的应用中。尽管如此常见，字符数限制却总被设计得很糟糕。值得庆幸的是，通过遵循以下 6 个关于输入长度限制设计与字符计数器显示的简单原则，便可使输入受字符数限制的文本变得简单方便。 总的来说，有以下 6 个设计字符有限的文本域的主要准则： 避免对文本输入作字数限制 为字符数限制增加视觉提示 在字数到达限制之前显示字符计数器 允许用户在达到字数限制之后继续编辑文本 允许用户方便地查看所有文本内容，以决定哪些内容需要被删减 为用户的内容输入提供其他渠道 现在，我们依次来看这些原则。 首先，避免对文本输入作字数限制。由于技术或架构上的限制，我们经常被迫需要对输入字数作出限制，因此导致输入变得非常不方便。但除此之外，这些限制毫无必要。有时我们本可以重新设计界面来满足更长长度的文本输入，有时我们草率地对用户如何构建他们的文本作出假设，有时我们并未作深入思考就对字数作了限制。我们要多思考与探寻是否有限制用户之外的其他替代方案。 第二， 为字符数限制增加视觉提示。200 个字符有多长？您能想象得出来吗？300 个字符呢？40 个呢？抽象的数字对于人们来说并不重要，我们很难猜出一个特定的字符限制对于文本输入意味着什么。所以，我们需要为用户提供其他的提示以帮助他们更好的理解内容的最大输入长度，以及他们当前已输入的长度。 有一种方法是，设计尺寸合适的输入区域，以便粗略地表示允许输入的最长文本长度。虽然这很难做到绝对准确（因为 140 个字母「i」将比140 个字母「w」显示的行数更少），但这种方式可为用户提供一个直观的字符限制的感受。例如 Twitter，发帖输入框的尺寸就大致等于输入最大限制字数时的尺寸。 Twitter 的发帖输入框 另一个方法是，当用户的输入接近最大限制字数时，改变字符计数器的颜色。例如 Stack-exchange 网站的评论输入框，当评论字数逐渐增加，计数器从灰色变成金色，最后变成红色。 Stack-exchange 网站的评论输入框 第三，在达到最大字数限制之前，显示字符计数器。您一定不希望用户在提交内容时才发现字数超出限制了，因为这将迫使用户不得不重新思考他们已经输入的内容，甚至是其他他们已经计划好提交的内容的结构。从认知上来说，这将耗费非常大的成本。您一定也不希望用超出字数限制的错误提示来打扰用户，所以，最好从一开始就显示字符计数器。如果计数器使你的设计变得凌乱，可以考虑给它设置一个不显眼的样式，比如灰色，当用户输入更多文字时，逐渐增强它的显眼程度。 第四，允许用户超出字符限制，并且在超出之后进行编辑。有一些字符数限制的设计是，一旦用户输入的文字达到最大限制，就禁止输入更多的文字。这是一个非常糟糕的设计，原因有两个。第一，它打断了用户复制和粘贴的操作；第二，提炼和修改文字内容比在输入完整文字前进行编辑来得更容易。允许用户输入完整的文字内容可帮助用户记住页面上的主要概念，然后开始编辑他们的素材。 第五，方便用户清楚了解哪部分内容是需要被删减的。正如以上第 2 点所提到的，对于用户来说，一定数量的字符数在字数层面上究竟意味着什么是难以理解的。这就是为什么以其他的方式提示用户当前已超出限制的程度是非常重要的。调整输入区域的尺寸，以暗示可输入的内容数量，这是一种不错的方式。但另一种更好的方式是，高亮用户已输入的文本中超出字数限制的那部分。 如下图的例子中，超出字数限制的文字为红色，所以用户可以一目了然哪些内容是需要被删减的。同时，这里还将红色的错误提示信息与触发它的文本联系起来了。 超出字数限制的文字为红色 第六，为用户的内容提供其他的输入渠道。如果用户正在打破字符限制，那么很有可能他正在以一种不恰当的方式使用此输入区域。因此，可以使用字数限制的错误提示引导用户使用更适合他们的内容长度的渠道或者输入区域。 例如，在 Facebook 中，当用户发布过长的 Status 更新时，将会弹出错误对话框，建议用户使用长度不限制的 Notes 功能。这促使用户使用适合冗长日志的 Statuses 功能，而不是专用的日志系统。如果你的用户正在打破字符限制，仅仅是因为他们误解了某一功能的使用目的，那么这个方法将会有所帮助。 用自己的话总结一下，就是：1. 在对文本输入作字数限制前先考虑是不是有其他方案。字数限制，并不是一种很好的方式，你有可能并未对用户的这个输入行为作深入了解，就草率地决定了这个最大限制字数。 2. 为这个「最大限制字数」增加一些视觉提示。单纯地放一个数字「200」对用户来说是比较难理解的，他们并不知道 200 个字是什么概念。增加提示的方式：如，将输入框的初始高度设置为刚好输入最大限制字数时的高度；或者，当用户的输入逐渐接近最大限制字数时，逐步改变字符计数器的颜色。 3. 一开始就显示字符计数器，而不是等到用户的输入超过最大限制字数时才显示。当用户的输入超过最大限制字数时才显示字符计数器的话，用户可能需要重新思考和安排他们已经填好的内容，甚至可能因为这一个修改影响其他本来就已经准备好录入的内容。如果担心你的界面设计因为字符计数器显得杂乱，可以给它设置一个比较不显眼的颜色 (如灰色)，当用户输入更多字数时，再慢慢提高字符计数器的显眼程度。 4. 在用户的输入达到最大限制字数后，也要允许用户继续输入。有一些字符计数器是，当用户达到最大字数限制后，就禁止用户输入了。这是很糟糕的一种设计方式，首先，这样可能使用户复制粘贴的内容被截断；另外，在原本完整的文本内容上进行修改总是比在被截断所以不完整的内容上修改来得容易。 5. 当用户的输入超出最大限制字数时，让用户清晰地知道哪些内容是超出的。例如，第 2 点中，将输入框的初始高度设置为刚好输入最大限制字数时的高度，这样，用户就知道超出这个输入框的部分就是超出的，需要把内容删减到能在这个输入框内完整显示；另一个更好的方式是，将超出最大字数限制的那部分文本变为红色。 6. 如果用户输入的内容超出限定的最大字数，说明他们很可能正在以一种不恰当的方式使用这个输入框，这种情况下，可利用错误信息引导用户改用更适合他们想输入的内容的途径或文本框。 其他相关讨论：字符计数器应该放置在相应文本框的什么位置？ 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 只有不超过 5% 的用户会调整默认设置]]></title>
    <url>%2F2019%2F05%2F02%2F%E8%AF%91-%E5%8F%AA%E6%9C%89%E4%B8%8D%E8%B6%85%E8%BF%87-5-%E7%9A%84%E7%94%A8%E6%88%B7%E4%BC%9A%E8%B0%83%E6%95%B4%E9%BB%98%E8%AE%A4%E9%80%89%E9%A1%B9%2F</url>
    <content type="text"><![CDATA[原文：Do users change their settings?作者：Jared Spool (2011-09-14)阅读时长：4m15s 早在 PC 时代，我们就对「用户是如何使用软件设计师为他们的应用程序所设计的选项、控件和设置的」这个问题感兴趣了。我们想知道，在多大程度上，用户会自定义他们的应用程序。 为此，我们着手进行了一些试验。我们邀请了大量的用户将他们的 Microsoft Word 的设置文件发送给我们。当时，MS Word 将所有的设置存储在一个名称诸如 config.ini 的文件中，所以我们邀请用户们将这个文件存入硬盘中，并通过电子邮件发送给我们。于是，我们收到了几百份这样的邮件。 然后，我们写了一个程序来分析这些文件，对「有多少用户曾经更改过应用中的 150 多项设置以及他们更改的是哪些设置」进行统计。 我们的发现非常有趣。在我们调研的用户中，只有不到 5% 的用户更改了设置，超过 95% 的用户则保留了应用程序安装时的默认设置。 这令人非常惊讶，因为程序中有一些默认设置是非常重要的。例如，此应用有一个功能是，在你编辑文件的过程中为你自动保存文件，以防在系统或应用程序突然崩溃时丢失任何内容。而在我们分析调查的的版本中，这个功能是默认关闭的。用户必须手动打开它，才能使它生效。 所以，这就意味着，有 95% 的用户是在自动保存功能关闭的情况下使用此应用程序的。当我们对这些用户中的一部分人进行访问时，他们都告诉了我们同一个事情：他们认为 Microsoft 关闭这个功能肯定是有原因的，否则他们为什么要这么设置。还有一些用户告诉我们，「Microsoft 一定知道他们在做什么」。 我们再三思考了这个问题，并且对「将如此重要的一个功能设为默认关闭」的原因进行了猜想。我们猜想，之所以这么做或许是考虑到「用户使用的是软驱或者用户使用的硬盘空间较小运行较慢」，而自动保存会对性能造成影响，所以他们希望为最坏的情况做一些优化，而且，如果用户需要用到这个功能，他们自然会去打开它。 我们有朋友在 Microsoft Office 团队中工作，于是我们向他们询问了将这个功能默认设为关闭的原因，并且提出了我们关于性能优化的这个假设。但他们进行了解之后告诉我们，我们的假设是错的。 事实证明，在该版本中，将该功能默认关闭，并不是因为他们考虑到了用户的需求。相反的，这只是因为一个程序员决定将 config.ini 文件初始化。将一个文件初始化是一个又快工作量又小的工程，所以他就先这么做了，寄希望于之后会有人告诉他实际需要的默认设置应该是什么样的。但是结果并没有人这么做。 由于二进制中 0 代表关闭，所以「自动保存」以及其他一些功能，都被默认设为关闭。用户认为 Microsoft 一定是经过仔细考虑才这么设置的，但事实并非如此。 我们向参与调查的用户了解一些背景资料，比如他们的年龄与职业，以看看是否存在一些区别。但毫无例外，只有一类人几乎总是主动调整他们的设置，这类人就是程序员和设计师。他们会调整应用程序中 40%，甚至多达 80% 的选项。 谁能想到，程序员和设计师们喜欢自定义他们的应用程序。这也许正好就是他们选择这份职业的原因？ （顺便说一句，如果你是一个程序员或者设计师，那么你将和大部人不一样。你习惯于调整你所使用的应用程序 的设置，并不意味着你的用户也会这么做，除非他们也是程序员或设计师。） 在几年的时间里，我们采用不同的形式重复了这个试验。我们发现，用户几乎不调整他们的设置。 如果你的应用程序也有很多设置，你是否曾调查研究过你的用户是如何使用它们的呢？有多少用户调整过这些设置？他们是否仍保持这些选项为默认状态？你的设置界面是否解释了每个设置的含义，并且告知用户为何要调整这些设置？ 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二零一九年五月]]></title>
    <url>%2F2019%2F05%2F01%2F%E4%BA%8C%E9%9B%B6%E4%B8%80%E4%B9%9D%E5%B9%B4%E4%BA%94%E6%9C%88%2F</url>
    <content type="text"><![CDATA[# 2019.05.01 今天是 2019 年 5 月 1 号，我们的社会依然面临三大严峻问题。治疗胃溃疡的药，不良反应是，胃炎。抗过敏的药，注意事项是，过敏体质者慎用。缓解抑郁症的药，有增加自杀倾向的风险。 # 2019.05.02 今天是 2019 年 5 月 2 号，从朋友圈看当代中国青年的精神境况和生活状态。世界杯。创造 101。权力的游戏。热情一年不如一年。 # 2019.05.03 今天是 2019 年 5 月 3 号，在我的故乡吉林延边二道白河。我看见过。雪往天空里飘。最后落入银河。银河是白色的。]]></content>
      <categories>
        <category>碎碎念儿</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[历经九九八万五千六百七十一难，迎来互联网生涯新高！]]></title>
    <url>%2F2019%2F04%2F21%2F%E5%8E%86%E7%BB%8F%E4%B9%9D%E4%B9%9D%E5%85%AB%E4%B8%87%E4%BA%94%E5%8D%83%E5%85%AD%E7%99%BE%E4%B8%83%E5%8D%81%E4%B8%80%E9%9A%BE%EF%BC%8C%E8%BF%8E%E6%9D%A5%E4%BA%92%E8%81%94%E7%BD%91%E7%94%9F%E6%B6%AF%E6%96%B0%E9%AB%98%EF%BC%81%2F</url>
    <content type="text"><![CDATA[折腾了两天之后，我终于拥有自己的部落格啦！哈哈哈哈哈哈开心！快乐！满足！充满希望！（止不住的膨胀 谁能想到，这个普普通通的周末也许可能就是我这一生中用脑强度最大的两天了。在稀里糊涂地安装了 Git、Node.js、Xcode，新建了 repository，弄完了域名注册实名验证域名解析，各种注册各种设置，各种改样式，各种 hexo c、 hexo g、hexo s、hexo d，各种 error 各种 warning 之后，我终于迎来了自己的个人网站。 辛苦我自己了（高光时刻儿 。 虽然还很简单，但暂时还够用儿，其他的边用边学就好啦。还是要好好学习，好好写文章呐。 感恩 Hexo，感恩 GitHub，感恩互联网，感恩所有分享经验和想法的人儿吖（扑通一声跪下（感恩「简书」不让我改昵称改头像让我有了建站的小动机儿 。 Cowabunga！ 图片来源：动画《探险活宝》]]></content>
      <categories>
        <category>碎碎念儿</category>
      </categories>
  </entry>
</search>
