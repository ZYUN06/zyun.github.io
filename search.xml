<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[《设计之下》读书笔记]]></title>
    <url>%2F2019%2F05%2F14%2F%E3%80%8A%E8%AE%BE%E8%AE%A1%E4%B9%8B%E4%B8%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[# 前言 用户体验绝不是一个页面，一个 icon，一个动效，而是由这些基本元素构成的一个系统的流程，可以说是用户的浏览路径。 宜家的购物路线可以说是一种典型的用户体验设计。 通过导视标志和墙壁的阻隔与划分形成了蜿蜒而接近唯一的浏览路径，巧妙地解决了顾客迷路的问题，且保证顾客基本看到了所有商品，从而最大限度地挖掘顾客的购买潜力。传统商场的购物点往往是散状分布的，即便有很多路径相连和功能划分，仍很容易迷路。—— 设计软件时，也要考虑用户的使用路径。用最简单的方式引导，帮用户找到关注的内容和想使用的功能，快速地进行消费。 样板间，如“餐厅”、“客厅”、“厨房”等等。消费者买下水杯后，会感觉其搭配的餐垫也不错，桌椅风格也相符，最后买下整个餐厅的大部分装饰。让商品之间产生联系，引导消费者购买搭配好的套餐。—— 这是一种典型的场景化设计。从产品的角度解释，样板间在这个整个购物流程中起到了流量的再分发作用，并且将模块和功能之间相互打通，是整个购物流程中的关键节点。如新浪微博的广场就是这种流量再分发在软件上的体现。 内容即 UI。视觉上扁平不如让内容层级和交互逻辑扁平。 # 解析需求 交互设计五要素 人、动作、完成动作必要的辅助工具、周围的环境和目的。 人 / 通过工具 / 完成动作 / 达到目的 / 在环境里，这个句子格式可用于任何项目、任何功能。 解析需求的方法 交互模型、功能系统、信息架构。 交互模型是指根据产品需求文档，绘制可以体现并很好地串联起交互五要素的图表，表现产品“外在”的生态系统。然后进一步，绘制功能系统来分析产品”内在”的具体功能，以及体现每个功能间的信息流和交互方式的信息架构。 交互模型关注的是用户与产品的关系，功能系统侧重的则是产品内部各个模块之间的结构，信息架构的重点是梳理信息流动的过程。 交互模型 Interaction Model操作（动作）对于智能手机端的应用，操作主要分为两类。 一类是针对手机硬件的开发，如“语音对话”、“摇一摇”。手机震动、提示灯、提示音等也可算作操作范畴。 另一类是针对软件操作的，如单击、双击、左右滑动、按钮。这类操作一般对应界面上具体的元素，如按钮，或是人们基于对自然事物的理解所形成的操作习惯，如左右滑动来切换上下页。 环境可从两个方面考虑环境因素：限制和优势。 作为移动端的应用，用户所处环境没有坐在电脑前那么稳定，比如在走动中，或受天气影响（如天气太冷戴手套不便操作）。因此，需要更多地发掘手机的特性，为一些原本“较为精确的操作”提供其他选择。（提供其他选择，而不是完全替代传统操作。）例如： 不同于电脑前的长阅读，大家在手机端往往是一种短阅读的状态，获取的信息和反馈都是碎片化的，所以通过发送语音和图片来表达观点和抒发感情也是一种不错的选择。 手势操作：如，左右滑动界面切换上下篇，比点击按钮的容错率高很多，更适合在走动中操作。 平板的阅读状态比电脑闲适，但比手机稳定。在设计时也应针对性思考。 信息架构 Information Architecture 信息架构是信息直观表达的载体，诞生于数据库设计领域。 信息架构的主体对象是信息，通过设计结构、决定组织方式及归类，以达到让使用者容易寻找和管理的目的。 信息的流通可以体现在用户完成一个任务时所经历的步骤，是否和他的预期相同。这个“预期”一般来自于人的本能和经验。任务也有轻重之分。 对理论的学习和掌握是必要的，但更多的是启发作用，意在建立个人的信息架构意识。 设计信息架构时的注意点： 优先考虑用户体验的设计原则。以用户为中心，通过拆分用户的行为，力求为他们设计最简捷的操作步骤。 对技术需要一定的了解或基本意识。在工作中多和前端、后台的工程师沟通，以确保设计出来的产品架构和交互方式不会带来不必要的技术负担。 从产品策略和延展性的角度考虑。如今产品迭代很快，功能越来越丰富，所以，在做信息架构时，需从产品的宏观架构上考虑，达到“便于未来延展”的目标。]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>用户体验</tag>
        <tag>读书笔记</tag>
        <tag>设计之下</tag>
        <tag>交互设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Social Proof 社会认同]]></title>
    <url>%2F2019%2F05%2F14%2FSocial-Proof-%E7%A4%BE%E4%BC%9A%E8%AE%A4%E5%90%8C%2F</url>
    <content type="text"><![CDATA[社会认同是什么？社会认同是 Robert Cialdini 在其著作《影响力：说服心理学》（最早出版于 1984 年）中提出的 6 个影响力原则之一。它描述了一种心理和社会现象：人们通过模仿他人的行为，以试图在特定的情况下采取行为。 简单地说，社会认同就是个人在群体中的从众心理。当人们处在新的或不熟悉的环境中时，我们会倾向于认为他人比自己更加了解所处的情况，他人的行为也总是合理和正确的。因此，个人会做出和他人一样的行为，以获得群体的认同。 社会认同相关的社会现象如果你在逛街时看到某家店门口排着长长的队，你可能会认为这家店很有人气，从而认为这家店的商品一定很好，因此，自己也很想去买。 社会认同在产品设计中的应用人们会通过借鉴他人的行为来指导自己的行为。因此，我们可以在产品设计中体现一个群体的行为、观点和建议等等，以影响用户。 • &nbsp; 统计数据，如点赞数、评论数、阅读数等等 • &nbsp; 展示良好的积极评价或推荐 • &nbsp; 提供其他用户的行为或结果的可见性如，朋友在看，XX 刚刚喜欢了这首歌，喜欢这首歌的人也喜欢 XX，XX 刚刚点了这家外卖，XX 刚刚购买了这款大衣]]></content>
      <categories>
        <category>设计理论</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>用户体验</tag>
        <tag>心理学</tag>
        <tag>说服心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SAP Fiori：Breadcrumb 面包屑]]></title>
    <url>%2F2019%2F05%2F14%2FSAP-Fiori-Breadcrumb-%E9%9D%A2%E5%8C%85%E5%B1%91%2F</url>
    <content type="text"><![CDATA[Intro 简介面包屑导航（Breadcrumb 或 breadcrumb trail）是一种辅助导航，用于显示当前页面在其应用层次结构中的位置。它通常用于向下钻取挖掘的场景，用户在其中浏览相关对象页面、表格和图表。 Usage 用法如果出现以下情况，请使用面包屑：• &nbsp;您希望在对象页面上显示辅助导航• &nbsp;您希望在表格中显示导航• &nbsp;您希望在图表中显示导航 仅当向下钻取的场景指向相关对象页面时才使用面包屑：父对象页面 / 子对象页面 1 / 子对象页面 2 / 子对象页面 3。 如果出现以下情况，请勿使用面包屑：• &nbsp;您的层次结构仅包含一个层级 面包屑路径中不应包含以下元素：• &nbsp;其他 floorplan，例如概览页面和列表报告• &nbsp;跨应用导航至其他对象页面• &nbsp;独立的对象页面，例如情况说明书• &nbsp;SAPFiori 2.0 的全局导航概念将介绍这些情况。 Responsiveness and Adaptiveness 响应性和适应性面包屑是响应的。如果水平空间不足，面包屑路径中的链接可折叠放在下拉菜单中：• &nbsp;面包屑中的第一个链接（起点）首先折叠，然后是层次结构中的下一个链接。• &nbsp;面包屑中的最后一个元素始终是可见的，并且永远都不会被折叠进下拉菜单中。• &nbsp;如果水平空间不足，则截断显示最后一个元素。 面包屑 - Size L 面包屑 - Size M 面包屑 - 面包屑 - Size S 面包屑 - Size S（下拉菜单） Layout 布局面包屑的水平布局永远保持不变。链接总是紧挨着显示。 Types 类型面包屑有两种类型：• &nbsp;标准面包屑标准的面包屑将当前页面作为最后一项显示。最后一项只包含纯文本，而不是链接。• &nbsp;不包含当前页面的面包屑仅在对象页面中使用此面包屑。面包屑显示了对象页面在应用中的位置，不显示当前页面。面包屑中的所有项目都是链接。 标准面包屑 不显示当前页面的面包屑 Components 组件面包屑可包含链接和文本（标准面包屑），或者只包含链接（不包含当前页面的面包屑）。 Behavior and Interaction 行为与交互导航面包屑的目的是触发导航。当用户点击面包屑路径中的链接时，将触发此操作。有关链接的行为和交互，请参阅链接。 Styles 样式要了解不同的链接样式，请参阅 链接。 Guidelines 指南在桌面和平板设备的下拉菜单中，仅显示面包屑路径中不可见的链接。在智能手机的下拉菜单中，按层级顺序显示面包屑路径中的所有链接。 原文：Breadcrumb | SAP Fiori Design Guidelines备注：文章内容翻译自 SAP - Fiori Design Guidelines。翻译包含个人理解，仅作为个人学习笔记使用。如有错误，求指正呀，非常感谢 ^^]]></content>
      <categories>
        <category>译文</category>
        <category>SAP Fiori</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>设计指南</tag>
        <tag>SAP Fiori</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SAP Fiori：Action Sheet 动作菜单]]></title>
    <url>%2F2019%2F05%2F13%2FSAP-Fiori-Action-Sheet-%E5%8A%A8%E4%BD%9C%E8%8F%9C%E5%8D%95%2F</url>
    <content type="text"><![CDATA[Intro 简介动作菜单由一系列选项组成，用户可从中进行选择以完成操作。如果屏幕上没有足够的空间，可对选项进行归类。警告：此控件的使用有着诸多限制，通过引入「菜单按钮」可解决这些限制。所以，请尽可能使用「菜单按钮」，而不是「动作菜单」。 Usage 用法请使用动作菜单：• &nbsp;当需要一个提供多个操作的选择时。• &nbsp;在手机上，使用户保持在一个上下文环境中非常重要。• &nbsp;只有少量的操作时。 请勿使用动作菜单：• &nbsp;菜单中仅提供一个选项。在这种情况下，请考虑使用「按钮」。• &nbsp;需要显示一个分层级的菜单时。在这种情况下，请考虑使用「菜单按钮」。• &nbsp;对用户来说，「分割按钮」更有效。分割按钮提供了易于访问的默认操作，并提供了包含其他操作的选项。 Responsiveness and Adaptiveness 响应性和适应性动作菜单是完全响应的。在智能手机上，操作以列表的形式显示在对话框中。在平板电脑和桌面设备上，操作显示在气泡弹出框中。 Size S（智能手机）：对话框 Size M（平板电脑）：气泡弹出框 Size L（桌面设备）：气泡弹出框 Layout 布局动作菜单中的所有元素都是左对齐的。操作总是按重要程度从上至下排列。「取消」按钮使用负向按钮样式，并且居中以区别于其他操作。操作中按钮的点击区域包含动作菜单的整个宽度 （反过来，这个宽度又取决于最长的按钮）。 对话框 气泡弹出框 Components 组件以下元素可被放置在动作菜单中：• &nbsp;按钮• &nbsp;图标 Behavior and Interaction 行为与交互点击（Clicking/Tapping）根据设备的不同，点击溢出按钮（「…」）可打开气泡弹出框或者对话框。用户可通过点击屏幕上的其他任何地方来触发操作或者关闭动作菜单。在智能手机上，只能通过「取消」按钮关闭对话框。如果用户触发了某个操作，动作面板将自动关闭，同时系统将提供一个消息提示。 气泡弹出框 Guidelines 指南• &nbsp;请勿在动作菜单中只使用图标。仅显示文本或图标与文本的结合。• &nbsp;在智能手机上，提供「取消」按钮以便用户在不触发任何操作的情况下关闭对话框。• &nbsp;避免在动作面板中进行滚动。如果一个动作菜单中按钮过多，用户就不得不通过滚动来查看列表中的所有操作。这不仅增加了用户区分操作的时间，而且在滚动的过程中非常容易误操作。 原文：Action Sheet | SAP Fiori Design Guidelines备注：文章内容翻译自 SAP - Fiori Design Guidelines。翻译包含个人理解，仅作为个人学习笔记使用。如有错误，求指正呀，非常感谢 ^^]]></content>
      <categories>
        <category>译文</category>
        <category>SAP Fiori</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>设计指南</tag>
        <tag>SAP Fiori</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 在公司里推动一个设计系统]]></title>
    <url>%2F2019%2F05%2F13%2F%E8%AF%91-%E5%9C%A8%E5%85%AC%E5%8F%B8%E9%87%8C%E6%8E%A8%E5%8A%A8%E4%B8%80%E4%B8%AA%E8%AE%BE%E8%AE%A1%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[原文：Selling a Design System at Your Company作者：Nick Stamas (2017-02-07)阅读时长：7m 27s 简介：我是 Nick Stamas。我创建了 Plasma，WeWork 的内部工具设计系统。你可以在这里阅读更多关于 Plasma 的内容。以前，我曾参与过 Meetup 对他们的新应用的重设计，并在我与人共同创办的一家初创公司里负责设计。 也许你和我一样。你的团队似乎总是很难在截止日期前完成你们引以为豪的工作，因为截止日期总是过于紧张。 你是个很好的设计师，你和优秀的产品经理和工程师一起工作。但你们缺少了某些东西。你深深感受到了这一点；有一个更好的构建产品的方法。作为一名设计师，你自然而然地想到了一个以设计为中心的解决方案：你们需要一个新的设计系统！也许你构想的是一些像这样的吸引人的东西： WeWork 的 Plasma 设计系统——来自 Andrew Couldwell 的图片 不幸的是，没有人关心你宝贵的设计系统。他们并不理解。这有什么用呢？它的价值是什么呢？不会耗时过长吗？不会很快就过时吗？这些不是为更成熟的团队准备的吗？你所做的不就只是让这些东西看起来更好看吗？也许你很想抓狂。但是我们以前也曾看过这样的电影：一位设计师在一个受咖啡因刺激的周末得到灵感，并在周一早上带回来一份 Sketch 文件，里面满是像素完美的按钮和文本输入框，双股纯五度的字体比例，和包含 7 个无可挑剔的灰色色调的调色板。它在你的作品集中看起来会很好看。但它发挥不了什么作用，只是在浪费在那个巨大的 Dropbox 文件夹中而已。 你感到束手无策。你能做什么呢？ 找到共同的痛点在 WeWork，我们打开的第一个应用并不是 Sketch，而是 Google Docs。首先，你需要使用单词和句子把问题清晰地描述出来。要具体地描述。问题出在哪里？对你和整个团队而言，最大的痛点在哪儿？一个设计系统并不是存在真空中的，它需要为每个人解决问题。所以你需要找到共同的痛点。例如： 你的团队花费了大量的时间在艰巨的视觉质量保证上。痛点：开发人员不喜欢抠像素。产品经理不喜欢进度缓慢。 当你漂亮的 mocks 在实现过程中不知怎的就突变了的时候，冲突就产生了。痛点：开发人员不喜欢猜测模糊的 mocks 和规范。产品经理不喜欢发布没有人喜欢的功能。 你的产品中存在 12 种不同类型的下拉菜单，它们的行为都略有不同。痛点：开发人员不喜欢重复开发。产品经理不喜欢不一致性。 未能进行计划或计划失败一旦你清晰地描述出痛点，并以与利益相关者对话的方式来构建它们之后，你就需要找到继续前进的道路。你不必找到所有的正确答案。最终的目标甚至都不一定是形成一个「设计系统」。 我们的目标是制定一个具体的、切实可行的计划，以解决团队的痛点。对于 Plasma，我和我们的项目经理一起制定了一个五周计划，分为几周，然后再分为几天。我们无法中断正常的产品工作流程，因此我们将这一点考虑了进去。我们从信息收集、研究、灵感开始、对我们现有的产品进行彻底的审查，并进行头脑风暴。在这个阶段，我们的目标是完善我们对问题的理解，并创造发散性的解决方案。 接下来，我们开始缩小我们的焦点，形成一幅更高分辨率的图像，我们可以在其中增加价值。很明显，我们存在沟通问题。我们的设计师和开发人员使用的不是同一种语言。这成为我们设计 Plasma 系统的指导原则。 推动当你开始这个过程时，你并不知道你将会在哪儿结束。设计系统并不是解决所有与设计相关的问题的灵丹妙药。你必须承认这一点。但是，继续推动这个构想使每个人都愿意买账至关重要。推动是一个过程，不仅是一次会议而已。寻找一切可传播的时刻。运用你讲故事的技能。向你的团队展示还可以有更好的方法。想一个令人难忘的名字，并且不断地重复它。进行引人注目的演讲来激起人们的兴趣。召唤出你内心的 Don Draper 或者 2007 年的 Steve Jobs。对于 Plasma，我在早期创建了一份简短的 keynote，并向几个不同的工程师小组做了展示。我关注的是 Plasma 如何统一设计与开发，使我们能够用一种通用的 UI 语言。我使用他们的单词：在 Git 中是「声明性」、「可组合性」、「可测试性」，以及「源代码控制」。尽管你付出了最大的努力，你还是会受到质疑。以下是我遇到的一些情况： 工程师认为设计系统不必要地给他们制造了更多的工作，将成为长期的技术负担。找到对这个构想最感兴趣的工程师。他们将是你最好的新朋友。最有效的设计系统将同时具有「设计」和「代码」组件。与他们一起寻找解决方案，以弥合设计与代码之间的代沟。至少可因为他们是工程师而帮你说服并赢得团队中的怀疑论者。 产品经理认为设计系统的开发和推广成本太高。尽早让你的产品经理参与进来。产品经理将从成本与收益的角度思考问题。你如何才能花较小的成本来创造巨大的价值？你能逐步做些什么？与他们一起制定目标和时间表。 有人认为设计系统只是创造一个「更好看」的产品而已。设计系统的创建有很多原因，但很少只是出于审美目的。设计系统至少在两个层面上创造价值。在团队层面上，它可以创建更简化、可预测的流程，从而缩短设计和开发时间。在用户体验层面，它有助于在界面中提供一致性和可预测性，并提高整体体验的质量，因为设计师和工程师可被解放出来思考更高阶的任务。 有人想知道你为什么不使用现成的东西。如果你正在一个年轻的团队或产品中工作，并且还不知道一个更自定义化的系统可在哪里增值，那么这实际上可能是一个不错的想法。但是，设计系统并不是放之四海而皆准的。有时候，一个过于僵化或复杂的系统可能比没有系统更糟糕，它会限制你的思维或成为你们集体共同的枷锁。 总结作为设计师，我们更喜欢以设计为中心的解决方案。设计系统可能是一个很好的工具。但是如果直接从一个 Sketch 文件开始，那就是本末倒置了。首先有很多工作要做。很多困难的事情，例如，找到共同的痛点，并以能与开发人员和产品经理产生共鸣的方式来构建它。并创建一个切实可行的可逐步实现价值的计划。向持怀疑态度的工程师推销一个更好的、更具协作性的未来构想。创建漂亮的像素只是其中一个步骤，当然也不是第一步。 如果你想了解更多关于我们在 WeWork 设计系统的信息，我的同事 Andrew Couldwell 有一个更深入的见解。 一个小彩蛋：我们的主要内部产品叫做 Spacestation，并且我们正在进行一些有关太空主题的项目。因为它是关于管理 space 的……明白吗？Plasma 源于希腊语，意思是「任何形成的东西」，并且是物质的四种基本状态之一。它们最适合于为远距离星际空间赖昌星任务提供动力。 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>设计系统</tag>
        <tag>产品设计</tag>
        <tag>Sketch</tag>
        <tag>案例研究</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | Plasma：创建并记录一个产品设计系统]]></title>
    <url>%2F2019%2F05%2F13%2F%E8%AF%91-Plasma%EF%BC%9A%E5%88%9B%E5%BB%BA%E5%B9%B6%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[原文：Plasma design system作者：Andrew Couldwell (2017-01-25)阅读时长：14m 29s 本案例研究旨在记录我们如何在 WeWork 创建一个设计系统。我将分享我们对流程、产品设计、用以创建和实践设计系统的工具的见解，以及我们如何记录和与团队共享此系统。 来自使用了 Plasma 设计系统的产品的一个 UI 示例 介绍WeWork 创建了鼓舞人心的共享工作空间，重点是社区。我们设计和构建我们自己的内部数字工具，以满足我们的业务需求，并管理我们全球的建筑和成员网络。Plasma 是一个为这些内部业务工具而创建的设计系统。Plasma 作为一个概念，是由我们的数字创意主管 Nick Stamas 创立的。Nick 向我们的工程师介绍了用 React JS 和 Sass 构建系统的概念，并从此领导了此系统的设计。我负责其设计、创意和文档。我同时也和产品设计师 Deena Edwards 合作，她将 Plasma 应用于我们的产品。 第一步：设计探索我们开始用 3 种不同的将应用此系统的内部产品进行试验——发现、建立和压力测试样式、组件库与模式库。随着时间的推移，方向、用户界面（UI）和样式都发生了变化，下面我将尝试捕捉这些变化，以展示被测产品的进展和范围。 sketch 画板展示了初步的探索 值得注意的是：此系统的设计方向深受 WeWork 的数字品牌指南 Wework Digital Foundations 的影响。 简单、清晰、干净我们的内部工具都是基于网页的数据密集型产品。简洁性、可读性和加载时间都是最重要的。我很早就知道我们正在努力寻求一种清晰、干净的美学。 色彩理论此系统主要为白色、黑色和灰色。重要的是，设计不能分散对内容的注意力，因此精妙是关键。明亮的颜色用于传达特别含义。黄色用于主要操作，因为黄色是 Wework 的核心品牌颜色之一。蓝色用于导航链接。红色用于警告和警报。我们还使用了紫色作为第三颜色，因为它是我们内部工具中的一种传统颜色，我们希望在我们的产品中保持一种熟悉的氛围。 字体匹配Plasma 专门使用了 Helvetia，一种简单、粗体的字体。Mac 电脑已经预装了 Helvetia，而未预装的电脑将回退至 Arial（类似的、但在网页上相对安全的字体）。这非常重要，因为不需要通过第三方脚本来加载字体，这意味页面加载速度更快。 设计所有的状态。Plasma 设计系统的主要 Sketch 文件总览 产品设计我相信您已经多次在 Behance 和 Dribbble 上看到「UI kit——免费下载！」。其中一些看起来很漂亮。但是，除非它们是用真实的产品、内容和数据进行设计的，否则它们中的许多最终都存在缺陷。永远都不要使内容适应设计，系统必须能应用于任何内容。不要只针对最佳案例场景进行设计——要考虑所有的场景。 使用将应用此设计系统的产品来创建一个设计系统至关重要，这些产品具有真实的数据和问题。 我们的目标不是创建最好看的系统，而是设计一个最能满足我们的需求的系统——在 Plasma 的案例中是业务需求，而对一些系统来说则是客户需求。我们当然打算创造令人愉悦的产品，但只是在增强用户体验（UX）方面。下面是我对塑造了此系统的 3 种产品的一点见解： 产品 1：CMS（又名「Maggie」）我们的 CMS 产品允许我们的营销和增长团队在我们的核心营销网站 wework.com 上添加、编辑和管理我们的建筑和市场。在 Plasma 之前，我们的 CMS 只是简单的一系列带基本 CSS 自定义的 HTML 表格。Plasma 塑造了这款产品的 UI 和 UX。下面是这个产品的一小部分 UI 示例。 应用了 Plasma 设计系统的 CMS 产品的界面示例 产品 2：Spacestation我们的 Spacestation 产品是我们在 WeWork 总部和国际上每座建筑中最常用的工具之一。它是一个数据密集型产品，用于管理与我们的会员和建筑相关的大型信息和账单数据库。它存在着很多表格、表单输入、过滤器和导航——是一个产品设计系统的完美测试平台！我和 Spacestation 的首席产品设计师 Deena Edwards 合作，对应用于此产品的系统进行构思、应用、压力测试和迭代。 应用了 Plasma 设计系统的 Spacestation 产品中的示例、概念 UI 产品 3：DataQueryWeWork 的业务性质意味着我们拥有大量的数据！在数字领域，这意味着我们有着大量可供使用的数据，我们可利用这些数据来开发更好的产品，以满足客户需求。这个产品的想法是在一个非常合适的时机提出的——我们已经开始构思 Plasma 设计系统，并且知道这个新产品既可使用此系统，又可随着对数据的额外需求而进一步推动它。我和我们的数据工程团队合作，构建了仪表板和数据查询工具。以下是其中一些探索。 使用 Plasma 设计系统对数据产品设计探索。显示的所有数据均为公开资料！ 第二步：模式和组件经过几天的探索、评审和迭代，我们得到了一个满意的样式。现在的任务是创建一套全面的模式和组件，包括所有的状态和场景——本质上是为我们的团队创建一份全面的 UI 工具包以供使用。我们的系统由一些基本元素组成，例如为标题和内容定义的文本样式、调色板、我们称之为模式和组件的东西，以及模板。 一致的 UI 模式和组件在引导用户使用产品方面会有很大的作用。 模式模式是指整个产品中反复出现或始终存在的元素或行为。例子包括导航、卡片、表格、空状态或加载状态、通知、警告和对话框。模式是通用的，可以包含组件，并且可以组合在一起构成模板。 组件组件是指整个产品中反复使用的特定 UI 元素——通常是可操作的，有时则用于传达含义。举几个例子有，按钮、输入框、选择器、开关、头像和工具提示。 Sketch 中正在进行的设计系统（以及文档资源） 通过此链接可快速浏览包含设计系统中所有模式和组件的主要 Sketch 文件（如上文所示）。 最好的工具我们为 UI 设计选择的工具是 Sketch。那些使 Sketch 非常适用于产品设计的功能使它在系统设计中尤其强大。当您在创建数百个可编辑的 symbol 和易于应用的文本样式时，Sketch 的简单性就变得至关重要。 关于响应性Plasma 的设计是具有响应性的。虽然构建响应式组件很简单，但模拟响应式就不那么简单了。至少我们是这么想的。设计能够在不同浏览器宽度下工作的 web UI 非常重要。幸运的是，Sketch 提供了设置元素以不同的方式响应尺寸变化的功能。利用设置、组和 symbol 的组合，您可在 Sketch 中创建基本的响应式 UI。虽然这对断点没有帮助，但它在快速查看设计在不同浏览器尺寸下如何工作或是否工作方面非常强大。因此，我们创建了具有响应性的模式和组件库。 Sketch 中的响应式设计 阅读此文可了解 Sketch 中的响应式设计。 第三步：模板的强大力量为保持产品的一致性，我们必须让我们的团队尽可能简单地使用 Plasma 进行设计。幸运的是，Sketch 的可编辑 symbol 和文本样式让分发和维护一个设计系统变得简单。 如果我们的团队无法简单地在他们的工作中应用此系统，那么产品的设计就很容易就误入歧途。 我们有一个（持续更新的）包含 Plasma 所有内容的主 Sketch 文件。我们最不希望的就是，人们在使用这个主文件的过程中不小心编辑和删除了一些东西！于是我们创建了一个 Sketch 模板以供我们的团队使用，托管 Dropbox 上。这个模板有一系列可编辑的 symbol，所有的文本样式，品牌颜色和一个随时可用的基本画板——使用 Plasma 可快速建立和组装一个用户界面。 使用已建立的模式和组件使我们能够专注于用户体验、解决问题以及构建有意义的功能和产品。 涵盖所有场景我们考虑了系统中所有的「状态」，并且每个状态都有相应的 symbol。例如，表单输入具有占位符、悬停、焦点、填充、错误和禁用状态。下面「多选组件」的示例中，在右侧，您可看到「多选/占位符」这个 symbol 是被选中的。您可以在下拉列表中获取其他所有 symbol——并更改 symbol 为「多选/填充」或「多选/错误」。这对于设计或绘制产品流程非常有用！ Sketch 中的 symbol 涵盖了表单输入、按钮等的所有状态 Craft Library我们还使用了一个很棒的工具，InVision 为 Sketch 设计的插件 Craft Library。它使我们能够创建一个共享的资源库（托管在 Dropbox 上），我们的团队可使用它来将元素拖动到他们的设计中。 更新（2017 年 12 月）我们现在使用 Sketch Libraries 来代替 Craft Library。它做的事情或多或少是相同的，但是效率高得多！您对设为 library 的 Sketch 源文件所做的任何更改，都会同步到任何使用该 library 组件的设计中。就很酷。 预先设置按钮、输入、样式等元件库，可降低重复设计元件的风险。 使用中的 Sketch 中的 Craft Library。这是 Plasma 的主 Sketch 文件的概览。 第四步：记录设计系统在创建设计系统时，必须要记住，您将不是唯一使用它的设计师（或开发人员）。从字面上记录设计系统是我在这个项目中面临的最大挑战。通常我会创建带注释的规范——通常是一些 psd 和 sketch 文件，以配合设计。在我的 Adobe Portfolio 案例研究中可以看到运用这个方法的一个很好的例子。虽然规范可以包含所有想象得到的细节，但是当有新的设计师接替你的位置时，仍可能会遗漏或误解一些事情。我们想利用 Plasma 做到更好。 如何记录设计系统我开始阅读和研究其他团队是如何做到这一点的。幸运的是，对此互联网上有很多的答案，很多公司已经公开了他们的文档。 这里有一个有用的链接列表，包含了我发现的所有在线设计系统文档。希望它对您能有所帮助。 看了网上这么多优秀的例子，我最初的目标就是创建一个网站来记录系统、规范、示例的使用，并制定所有模式和组件的指南。它可以作为一个快速参考，或者一本可详细研究的宝典。 但是，我不想因为创建网站所需的设计、构建和时间限制而被耽搁。所以，为了开始着手，我简单地创建了一个新的 Google 文档，并开始编写。随着文档内容的增加，我意识到它确实完全符合我们的需要。创建一个公开的品牌网站的唯一理由将是，作为 WeWork Digital 的 “荣誉项目”，或者作为我们开源此系统的资源。 但是就目前而言，事实证明，Google Docs 是最完美的媒介。我们所有的团队都可以轻易地访问它，并且他们可以在线评论，这对于反馈很有用。Google Docs 的「Document Outline（文档大纲）」功能，以及链接/定位到文档中的书签和标题的功能，为我们提供了足够的导航。 正如我们在英格兰北部所说的，Jobs a good’un（大概意思就是塞翁失马焉知非福……）。 我们的文档预览由于文档是在私人的 Google 文档中，所以下面我选取了一些截图，以便您更好地了解它的结构、布局以及所包含的内容。您可以单击图片以查看原图。 Google 文档中的 Plasma 设计系统文档 更新：2017 年 12 月发表这篇文章的大约 11 个月后，这个文档已经演变成一个您可以看到的网站。我们使用 GitHub 来支持版本控制，而且我们的团队可以轻松地进行访问，以便编写文档并为其做出贡献。使用 markdown 进行编写，并通过一些 CSS 自定义，您就可以为您的品牌定制文档。GitBook 并不完美，它不支持响应式，但它已经够用了。 查看 Plasma 设计系统文档。 幕后（下载）我创建了一些资源，以便您深入了解这个设计系统在 Sketch 中是如何建立的，包括 Sketch 文件下载和一份文档摘录。可在此链接中查看这些资源。 第五步：管理设计系统随着文档的逐渐形成，设计需要一种有效的方法，以便与开发人员交流和跟踪系统的构建与集成。我们选择（并推荐）使用 GitHub。我们为特定的组件创建了 issue，共享设计、规范和 CSS/Sass 的预览，以简化开发流程。通过这种方式，我们的工程师就可以一个接一个地处理这些问题，因为他们已经做好准备了，他们将负起责任，并且没有任何东西会被遗漏！ 我们使用 GitHub 来沟通将创建的组件 设计和代码Plasma 的主要开发人员也是一名设计师。我们的主要设计师（我）也是一名开发人员。这反映在了我们的流程和系统质量上。通过我们的文档，我们希望向我们的设计师展示 CSS/Sass，鼓励他们了解事物的运作方式。从「学习使用此系统进行设计」的角度来看，它有助于明确地查看和学习构建过程的值、间距和命名约定。它也有助于弥合设计和开发之间的鸿沟。 命名约定最后但同样重要的是：设计系统的目标之一是，让设计师、开发人员和产品经理都使用同一套语言。我们可以通过我们都熟悉的一致的语义命名约定（在设计和代码中）来帮助实现这一点，无论是 Sass 变量、字体样式、颜色、UI 模式和组件、模板还是页面名称。 一切都很顺利。 这不是终点我们对 Plasma 有一个宏大的计划。我们正在努力开发这个系统，并将其推广到您之前已看过的 Spacestation 和 CMS 产品中。在这个过程中，我们学到了很多东西，并致力于从全球使用我们的工具的员工那里获取有价值的反馈，然后进行系统的迭代。我们已经讨论过 Plasma 的开源，但我们还没有做到这一步。希望您喜欢这个案例研究，并对我们的设计过程、使用的工具和 Plasma 的预览有了了解。：） 特别感谢 WeWork 的 Nick Stamas 和 Deena Edwards 在这个项目上的辛勤工作和支持。还有我的编辑 Meagan Fisher !附注：不要直接使用 Sketch 来创建这样一个产品设计系统。我们为达到这个阶段做了大量的工作。我在这个项目上的联合负责人 Nick Stamas 在 Selling a design system at your company 中讲述了这个过程，推荐您接下来阅读这篇文章。 更新： 2017 年 12 月我写了一篇关于创建 Plasma 设计系统的基础工作的新文章 Laying the foundations for system design，以及为同个公司创建的另外一个设计系统！ 更新：2019 年我正在写一本关于系统设计和数字品牌指南的书！我很喜欢写作的过程，我计划在 2019 年印刷出版（还有电子书）。通过这个链接查看更多信息和进行注册以接收更新：Laying the Foundations — A book about design systems and digital brand guidelines。 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>设计系统</tag>
        <tag>产品设计</tag>
        <tag>Sketch</tag>
        <tag>案例研究</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 并不是所有网站都适合使用无限滚动]]></title>
    <url>%2F2019%2F05%2F12%2F%E8%AF%91-%E5%B9%B6%E4%B8%8D%E6%98%AF%E6%89%80%E6%9C%89%E7%BD%91%E7%AB%99%E9%83%BD%E9%80%82%E5%90%88%E4%BD%BF%E7%94%A8%E6%97%A0%E9%99%90%E6%BB%9A%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[原文：Infinite Scrolling Is Not for Every Website作者：Hoa Loranger (2014-02-02)阅读时长：4m08s 摘要：摘要：无限滚动使人们在浏览任务时可以不必使用分页机制。但对于那些支持面向目标查找任务的网站来说，这不是一个好的选择。 如果您正在考虑在您的网站中使用无限滚动，那么请停下来并考虑这个功能对于您的情况是否弊大于利。无限滚动是一种网页设计技术，可在用户向下滚动页面时不断加载内容，从而无需使用分页。 无限滚动在 Twitter 等社交媒体网站上的成功，使这项技术广受欢迎，但这并不意味着您也应当这么做。连续滚动对于内容流是有利的，它有着相对扁平的结构，其中每个内容单元都属于同一层次结构，并且用户感兴趣的机会相似。 无止尽的长页面是消磨时间的好方法，因为用户处于偶然探索和发现的心态中。无需获取和点击「下一页」的优势使受众专注于内容，而不必关注导航到下一页的机制。（降低交互成本的好处。） 在我们 Compelling Web Content 这个课程中，我们告诉设计人员根据信息的相关性来确定页面长度，而不是通过任意的度量。当人们在浏览网页时，如果信息单元的粒度级别相同且高度相关，比如，在特定的类别中搜寻礼物时，他们很乐意向下滚动较长的页面。这就是为什么在电子商务网站上，我们观察到，人们在有「查看全部」按钮的情况下，会点击该按钮来同时查看所有产品。 无限滚动有其优点，但应谨慎应用。请考虑您的网站内容与用户动机。对于面向目标的查找任务，例如，那些要求人们查找特定内容或者比较选项的任务，不建议使用无限滚动，对于电子商务网站来说，如果所有产品都以线性的方式呈现在一个无止尽的页面上，而没有排序或其他筛选或导航技术来帮助隔离目标产品，那么按功能查找产品可能很难快速完成。 此外，在一个非常长的页面上定位先前找到的项目是很低效的，特别是如果该项目被放置了许多向下滚动的分段。 对于人们来说，记住该项目在第 3 页比判断该项目在一个非常长的页面上的位置容易得多。 在心理上，无休止的滚动也会对用户体验产生影响。对于任务驱动的活动，无限滚动就像淹没在信息的深渊中，看不到尽头。那些需要特定类型的信息的人们希望根据相关性按页面对内容进行分组和分层。如果每次点击都是有意义的，并且使他们更接近期望的目标，那么 web 用户并不介意点击链接（例如，指向下一页的链接）。（了解如何运用心理学原理来预测和解释客户的想法和行为。） 有了分页，就有了开始和结束。人们可以预期浏览页面所需要的工作量。当一个页面浏览结束时，会令人产生一种完成任务的愉悦感。分页给了人们决定是否继续浏览下一页的控制权。较小的页面上的选择更容易评估，因为较少的选项不会让人感到难以承受。 对于无限长的页面，人们可能会因为内容或选择的数量而感到瘫痪，从而不点击任何东西。人们可能会看，但不行动。无限滚动可能支持浏览行为，但它也会导致不活跃（和较低的转化率），这与大多数网站制作者所希望的是相反的。 在桌面端，无限滚动最糟糕的地方是，它对用户使用了一个令人厌恶的伎俩。无限滚动会导致滚动条无法精确显示页面长度，从而破坏滚动条。信不信由你，人们仍然在使用滚动条。人们依靠滚动条来告诉他们还需要多少工作量才能查看完页面。在人们还未完成时就告诉他们已经快完成了，这样并不好。（了解更多关于无限滚动和其他新兴模式的信息。） 结论：无限滚动似乎是分页的一个优雅替代品。然而，对于大多数网站来说，这并不是答案。如果网站访问者希望实现面向目标的活动，例如，快速回溯或者查找特定信息，那么无限滚动可能并不适合您。 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>交互设计</tag>
        <tag>NN/g</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 「返回顶部」按钮设计指南]]></title>
    <url>%2F2019%2F05%2F07%2F%E8%AF%91-%E3%80%8C%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8%E3%80%8D%E6%8C%89%E9%92%AE%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[原文：Back-to-Top Button Design Guidelines作者：Hoa Loranger (2017-08-27)阅读时长：5m 27s 摘要：返回顶部按钮的 9 个 UX 准则，可帮助用户导航至长页面的顶部。根据用户需求，在某些网站上，使用其他技术可能更加恰当。 响应式网页设计的流行导致了移动端和桌面端单列长页面设计的数量激增。这些设计带来的结果就是「返回顶部」按钮，这是一种允许用户快速导航至页面顶部的一种快捷方式。 当用户到达一个非常长的页面的底部时，他们通常需要回到顶部，以：• &nbsp;查看导航菜单并选择一个新的目的页面• &nbsp;使用筛选和排序功能• &nbsp;在搜索框中输入或编辑问题 操作系统和浏览器已经提供了多种实现这一功能的方法：按下键盘上的 Home 键，点击 iOS 上 Safari 中的状态栏，使用快捷命令，等等。 然而，技术受众（如本文的读者）可能知道这些方法，但大多数用户却不知道。对一般 Web 用户来说，这些技术过于隐蔽和不适用，他们通常只使用手指或者鼠标来向上滚动。 当页面非常长时（比如，因为无限滚动），在屏幕和内容屏幕之间向上滚动就会变得非常乏味。因此，「返回顶部」按钮就发挥了作用。 「返回顶部」按钮的 9 个设计准则以下是一些关键指南，可以帮助您决定何时使用「返回顶部」按钮以及如何有效地设计它。 对于长度超过 4 个屏幕的页面，请使用「返回顶部」按钮。对于相对较短的页面，返回顶部按钮则多余了———人们可以轻松地滚动返回，而无需过多的努力。如果您只需使用滚动条或手指便可快速导航至顶部，那就没有必要让界面变得杂乱。 在页面的右下方放置一个持续显示的「返回顶部」按钮。这是人们期望看到它的位置。这个位置不碍事，但很明显。当按钮被放置在屏幕上其他地方时，通常会被忽略。 文本标签「返回顶部」。这个词组最具描述性。 仅有图标（例如，向上的箭头）可能会产生歧义，并且，根据图形认识的不同，可能无法传达正确的含义。 MedlinePlus.gov: 单独的箭头图标含义太模糊了，文本标签有助于解决这个情境中的歧义。 Overstock.com: 显示在箭头图标旁边的文本标签”返回顶部“，有助于解释该按钮。 每个页面显示一个固定的「返回顶部」的链接，而不是在页面中的各个部分显示多个链接。（后一种模式曾经在具有锚链接的页面上很流行。）在可用性研究中，我们观察到，人们忽略了这些重复的链接，因为它们是可预测的。 USA.gov: 重复的「返回顶部」链接增加了视觉上的混乱，导致它们被忽略了。 保持按钮尺寸较小，这样它就不会覆盖重要的页面元素。但是，如果是在触摸屏上，请将其做得足够大，以便人们点击它。 使按钮在页面看起来更突出，而不是混在一起。当「返回顶部」与背景内容太过混合时，用户将不太可能会注意到并使用它。 考虑延迟显示「返回顶部」，直到用户滚动了几页并表明他们想要向上滚动（例如，向上移动滚动条，向上划动页面）。因此，按钮仅在最需要的时候才显示，而不会在其余时间覆盖屏幕上的重要部分。 Overstock.com: 只有当页面向上滚动时，才会显示「返回顶部」链接。（并且正如我们所建议的那样，它位于右下方。） 固定显示按钮。一旦按钮出现，禁止它移动。移动的元素造成很大的干扰，因为眼睛会自动被屏幕上任何移动的元素所吸引。 让用户控制滚动。永远不要让页面自动滚动，例如，当页面顶部出现新内容时。最好提供一个通知并允许用户决定是否滚动以查看任何新内容。 「返回顶部」按钮的替代方案有其他方案可帮助人们去他们需要去的地方。回到顶部是达到目的的一种手段。如果您能预测用户想要什么内容并提供给他们，那就更好了。以下是一些方法： 页面底部的导航可以满足那些想要返回顶部去导航或搜索其他内容的用户。当用户倾向于滚动到网站上长页面的最底部时，这种方法最有效。 Etsy.com：该网站在页脚内和页脚附近提供了链接以支持 user journey，而不是使用「返回顶部」。 与「返回顶部」链接相比，sticky menus 有时候是更优雅的解决方案。如果滚动的主要目的是导航至网站中不同的话题或部分，那么当人们需要时，可直接使用菜单选项，而无需返回顶部。 类似地，如果向上滚动页面的主要目的是访问页面顶部的常见功能（例如，筛选，排序，搜索，下一页），那么在人们向上滚动时显示这些功能可以提供及时的帮助。 Nordstrom.com: 该网站将提炼出来的功能固定显示在页面一侧，防止大多数购物任务需要回到顶部。 社交网站上的「主页」按钮通常会将人们带到主页的顶部，主页恰好是一个有着很长 Feed 的页面，最需要的就是快速返回顶部的方法。在社交网站上，大多数人都习惯于点击「主页」按钮来滚动至 feed 的顶部。虽然「主页」按钮可以在社交网站上使用，但不要指望它也适用于其他类型的网站。在一般的网站上，人们希望「主页」链接将他们带到主页，而不是同一网页的顶部。 Twitter.com: 「主页」按钮同时有「返回顶部」的功能。 总结有许多好的解决方案可以帮助人们回到网页顶部。在您决定使用「返回顶部」链接之前，请考虑您的具体情况并确定哪种方法最适合于您的受众。 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>交互设计</tag>
        <tag>NN/g</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 用户体验中的「社会认同」]]></title>
    <url>%2F2019%2F05%2F07%2F%E8%AF%91-%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E4%B8%AD%E7%9A%84%E3%80%8C%E7%A4%BE%E4%BC%9A%E8%AE%A4%E5%90%8C%E3%80%8D%2F</url>
    <content type="text"><![CDATA[原文：Social Proof in the User Experience作者：Jen Cardello (2014-10-19)阅读时长：12m28s 摘要：人们会受他人行为所引导，因此，我们可以在设计中体现一个群体的行为，信仰和建议，以影响用户。 Robert Cialdini 在他的著作《影响力：科学与实践》中提出了关于影响的 6 个原则：• &nbsp;回报• &nbsp;社会认同• &nbsp;喜欢• &nbsp;稀缺性• &nbsp;权威性• &nbsp;承诺与一致性 在本文中，我们将讨论此列表中的第二个原则：社会认同。 社会认同是一种人们通过借鉴他人行为来指导自己的行为的心理现象。这种倾向是由我们希望在大多数情况下都“正确”行事的自然愿望所驱动的——无论是购物，决定去哪里吃饭，确定应该去哪里，说什么，跟谁说，等等。在现实生活中，社交认同最好的例子之一就是，新 iPhone 发布当前天 Apple Store 门前的长队。事实上，一群人发现这款新手机如此受欢迎，以至于花了相当长的时间站着（或睡觉！）排队，这会影响我们对这款手机的价值的感知（并使我们也垂涎三尺）。 英国的苹果店开店当天的照片，由 Lucius Kwok 拍摄。通过 Creative Commons License 许可使用。 如果其他所有人都想要，那这件东西一定是好的。这就是为什么麦当劳在 1985 年贴出「售出超过 1 亿个汉堡包」的标语。 社会认同界面模式的例子Web 2.0 已经普及了将用户的行为与意见公之于众的做法，其目的是影响和告知他人。以下是几个社会认同原则发挥作用的例子。 评价 Adagio Teas 使用评价来影响潜在的购买者：“如果其他人喜欢这种茶，那么也许我也会喜欢它。” 行为（社交过滤器） eBags 根据其他（浏览过同个页面的）顾客的浏览情况展示相关的包包；“如果他们查看过这款包包，那他们查看过的其它包包一定也是我想要的。” 观点 在 Etsy 的这个例子中，此界面包含了“欣赏”某个特定项目的人数及用户名。Etsy 上的商店通常包含唯一的或数量有限的商品，因此其他引人关注的相关介绍也利用了稀缺性原则的影响。 社会认同原则的背景社会认同是 Robert Cialdini 博士在其著作《影响力：说服心理学》（最早出版于 1984 年）中详述的 6 个影响力原则之一。作为一名心理学教授，Cialdini 和他的学生进行了大量的研究，以确定和证明这些原则。社会认同可消除我们的不安全感和「做正确的事情」的欲望。 有时候，在可用性研究中，用户会告诉我们，他们不关心用户评论，不相信其他人的意见，他们所做的所有决定都基于自己独立的观点。但不幸的是，成千上万的心理学研究都证明了这种「孤狼」理论是完全错误的——这也是我们应当根据用户做什么而不是说什么来做设计决策的另一个例子。 社会心理学研究一再表明，在我们所做的几乎所有决定中，我们都有意识或无意识的依靠对方作为线索。社会认同最普遍的用法之一是，情景喜剧中的普遍不受欢迎的「笑声音轨」。Cialdini 指出，“实验发现，当幽默的素材出现时，使用罐头笑声（预录笑声）会让观众笑得更久，更频繁，并且让观众觉得这些素材更有趣。此外，一些证据表明，罐头笑声对低劣笑话最为有效。“ 何时使用此技术• &nbsp;增强可信度：用户确实会顾及其他人如何看待他们在网上找到的内容，服务和产品。添加一个指示，表明其他人，甚至更好的、熟悉的人喜欢此内容或产品，可消除决策的不确定性。• &nbsp;鼓励采纳和接受：如果您想让人们订阅时事通讯或关注 Twitter 账户，告诉他们您已经拥有大量的订阅者，这样可以增加订阅量，因为这表明了其他人喜欢您的内容。（例子：我们自己的时事通讯的订阅页面。请允许我们使用我们自己的网站作为一个优秀例子，仅此一次 :- ） 测试社会认同使用社会认同最大的风险是，人们会觉得很少人认可此内容、服务或产品。在最近的一次可用性讨论中，一个用户查看了一篇文章的分享人数，然后指出此文章不够受欢迎，因此它可能不太好。 当一位研究参与者注意到只有 1000 个人在 Fackbook 分享了这篇文章时，她就不会被打动。当然，只有 17 个人分享到 G+，这个给人的印象就更差了。 社会认同元素的另一个风险是，使界面变得繁忙，并且（可能）使页面加载过慢。社交小部件通常会使与社交网站（如 Facebook 和 Twitter）连接的后端通信变得复杂，并显著增加网站的响应时间，尤其是在移动设备上或者在网络连接较差的地方。 下表列出了您在考虑使用社会认同时需要提出的问题与采用的测试技巧： 问题：哪些社会保障机制（如果有的话）可增加转化率？测试/数据：评论，评价，喜欢和推荐的 A/B Testing 问题：社会认同功能会影响可信度吗？测试/数据：可用性测试，使用特定任务的后续调查来衡量信心（例如，“在 1~7 的范围内，您对此选择有多自信？”“），以此引起对信息的情感反应。 问题：用户是否注意到社交认同功能？测试/数据：可用性测试或眼球追踪测试，以测量分配给社交功能的注意力和眼睛注视。缺乏集中注视可能表明此设计不佳。此外，基于任务的可用性研究也可用于测试。 问题：社交认同功能是否会令用户不堪重负？测试/数据：可用性测试可表明社会认同功能是否会导致拥挤且混乱的界面，从而分散对用户的行为号召。 问题：社交认同功能是否会降低页面速度？测试/数据：评估页面加载时间，以确定它是否适合各种网络连接状况。 总结在许多 web 环境中，使用社会认同已经变得非常普遍。更精明的实现是，不仅表明普遍的采纳与偏好，而且突出显示认识的人（比如，Fackbook 好友）的采纳。由于社会认同的成功，一些网站可能会过度使用这种技术，并且使简单的交互复杂化。这就是为什么对特定的设计实现进行测试是很重要的，而不是简单地认为任何社会认同的功能都是有益的。 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>用户体验</tag>
        <tag>心理学</tag>
        <tag>NN/g</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 命令链接]]></title>
    <url>%2F2019%2F05%2F07%2F%E8%AF%91-%E5%91%BD%E4%BB%A4%E9%93%BE%E6%8E%A5%2F</url>
    <content type="text"><![CDATA[原文：Command Links作者：Jakob Nielsen (2007-05-14)阅读时长：5m33s 摘要：应用中的命令可以以按钮或者链接的形式呈现，这为解释提供了更多的空间。然而，对于主要命令来说，按钮仍然是最好的选择。 在较简单的时代，网站和应用程序分别有着两套明显不同的设计指南。例如，在呈现用户的选择时有不同的规则：• &nbsp;网站通过链接（带下划线的彩色文本）提供导航• &nbsp;应用通过菜单和按钮提供操作 网站和应用程序的设计指南是不同（并将继续保持不同）的，因为有一个可用性的基础原则是：良好的设计是基于（a）用户和（b）他们的任务的。在后一个方面（用户的任务），网站和应用程序存在着根本差异：• &nbsp;网站：用户的主要任务是，在一个信息空间中移动，并阅读其内容• &nbsp;应用程序：用户的主要任务是，通过执行命令来改变一些数据集的状态 事实上，应用程序的定义就是，它的功能会影响其自身用户界面之外的一些东西。使用应用程序会令某些东西发生变化，因为用户要求更改它。相比之下，一个网站不会因为被使用而改变；页面总是保持相同。（尽管信息可能会改变，但网站页面在概念上是静态的。）例如，一个包含明天天气预报的页面总是包含这些信息，即使一天显示了阴雨天气的图标，而另一天显示了阳光的图标。 应用程序和网站之间的界限变得模糊在过去的十年里，网站和应用程序之间的明确区别已经变得模糊了。 首先，在语义层面上，网站提供了越来越多的功能。最被广泛使用的功能是「添加至购物车」，并且在电商可用性指南中，总是以按钮的形式显示此功能，即使是在网站上使用它。因此，对于类似应用程序的网站组件（那些代表功能和命令，而不是普通信息的组件），您应该遵循应用程序的可用性指南（与「添加至购物车」功能一样）。 第二个问题更难处理：在语法层面上，按钮和链接的区别已经变得模糊，因为有一些命令也被显示为链接。幸运的是，我们至少有一个明确的规则：不要使用按钮来导航。用户应当点击一个普通链接以移动至另一个信息页面。 然而，即使是这条规则，也有例外：购物车中的「继续购物」和「继续付款」选项传统上是显示为按钮的，尽管它们是纯粹的导航。当用户点击这两个选项中的某一个时，并没有改变任何东西，而只是移动到另一个页面，这个页面中有他们需要使用的命令。但是因为付款是工作流程中的一部分，因此它可以从普通的链接导航规则中得到豁免。 但，主要的规则是，用户在页面之间移动时需使用链接。除其他众多好处之外，普通链接还允许用户在新标签页或新窗口中打开一个新页面，如果他们希望的话。并且，您还可以使用不同的颜色来显示链接文本，这取决于用户此前是否访问过这个目标。 命令链接设计指南Windows Vista 引入了一个新的 GUI 命令小部件：命令链接。一旦人们每天都使用系统中的某些东西，它就成了事实上的标准。因为他们会经常在 Vista 中遇到它们，所以用户将逐渐了解并使用命令链接。 许多网站已经使用命令链接。不过，尽管用户越来越意识到链接可以激活命令，但仍然存在令用户感到困惑的风险，因为大多数链接都是用于导航的。 为减少困惑，链接文本应当明确说明它导致的是一个动作，而不仅仅是一个新页面。仅在周围的文本中传达这个信息是不够的；用户经常扫描网页，以寻找他们可以操作的区域。因为，您应该假设大部分用户只会阅读链接文本。事实上，用户通常只阅读链接文本中的前几个单词，所以，以一个能够表明点击链接时会导致的操作的单词（通常是动词）开头是很重要的。 至于大写规则，请参考您的企业风格指南中的常规链接指南。如果没有风格指南，请使用句式大写（即，仅将命令名称中第一个单词的第一个字母大写）。如果是环绕在句子中的直接链接，则例外。但是，通常最好避免在正文中使用命令；直接链接应仅限于导航。 命令链接的使用限于：• &nbsp;具有轻微后果的操作。因为用户可能会点击一个看起来像链接的东西，期望它所做的只是打开一个新页面。例如，在经纪业务应用程序中，继续使用按钮来执行「购买此股票」的命令。• &nbsp;次要命令。因为用户在寻找“严肃的”的命令或主命令时，会扫描屏幕以找到一个按钮。因此，您应当以按钮的形式显示最重要的命令──不论是从用户的角度还是从您自己的角度。例如，继续使用「添加至购物车」按钮。 尽管存在这些限制，但命令链接还是有其优点，因为它们带来了一些好处。最值得注意的是，使用链接，您可以编写更长的命令名称，从而使其更具描述性。而按钮标签则必须简短（4 个字或更少），否则按钮看起来就会很奇怪。当然，由于用户不喜欢阅读，您应当尽可能保持命令描述简短。 Vista 展示了命令链接的另一个好处：能够在主链接文本下方增加说明文字。您可以用较小的字体来展示这个说明，以强调它的次要性（这样有经验的用户就不会浪费时间去阅读它）。因为按钮是封闭，因此它是独立的，我们很难在一个命令按钮旁边添加解释。并且，如果您这么做，用户很可能会忽略它。 现在是时候将您的一些命令显示为链接了。但是不要过度使用。 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>交互设计</tag>
        <tag>NN/g</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 应用中的应用：从微信小程序中学到的用户体验]]></title>
    <url>%2F2019%2F05%2F03%2F%E8%AF%91-%E5%BA%94%E7%94%A8%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%9A%E4%BB%8E%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E5%AD%A6%E5%88%B0%E7%9A%84%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[原文：Apps Within Apps: UX Lessons from WeChat Mini Programs作者：Feifei Liu (刘菲菲) (2018-09-09)阅读时长：12m28s 摘要：我们在中国的用户研究发现，嵌入式应用的设计者不得不考虑使用环境、父平台的核心功能以及该程序的使用方式。 截止 2018 年 3 月，作为中国最受欢迎的社交应用，微信的每月活跃用户数已达 10 亿。微信的综合服务涵盖了中国用户日常生活的方方面面，包括社交、购物、账单支付、新闻以及预定服务。2017 年底的产品更新中新增了一个新的主要功能：微信小程序（包括小游戏）。小程序和应用相似，但它们是在微信中构建的：感觉就像是一个更大的应用中的应用。因此，一个中国公司可通过 4 个不同的渠道与移动设备上的用户进行交互： 移动网站 原生应用 该公司的微信官方账号 微信小程序（本研究的主要焦点） 我们想了解人们如何看待这些不同渠道之间的差异，以及是否存在某些任务更适合其中某一个渠道而不是另一个。为了找出答案，我们在北京与 10 位微信用户进行了可用性测试研究。 即使你不打算设计一个微信小程序，这类可扩展的用户界面的用户体验也是很有趣的。传统上，网站和软件应用是封闭的包，无法由用户或第三方提供者进行扩展。相比之下，微信小程序是一种不同体验架构，与以下产品相关： 用于广泛的软件包的外接程序，例如，浏览器工具栏和电子表格工具包（例如，可为执行 ANOVAs 的少数用户添加至 Excel，而不会使大量群体混淆的统计分析功能） Facebook Messenger App，支持应用中 Gamesand Discover 的第三方游戏、新闻和购物服务 SaaS（Software as a Service）公司提供的整合应用程序 （例如，通过整合功能页面，Slack 用户可直接在 Slack 应用中链接到 Google Calendar 的事件或者 Trello 卡片） 在美国的两个「应用中的应用」的例子，Facebook Messenger（左边）在应用中包含了游戏，和 Slack（右边）支持可直接链接到他们的应用或者网站的第三方服务。 微信小程序的介绍对于那些不熟悉小程序的人来说，下面的这些例子将介绍它们是什么以及它们如何工作。 • &nbsp;小程序是在微信平台中构建的移动应用程序。包括游戏、食物配送、购物、门票销售、家庭服务、图片编辑，等等。 两个小程序：食物配送小程序「饿了么」（左边），旅行预订小程序「携程旅行」（右边）（为了清晰起见，我们在屏幕截图上叠加了一些英文翻译）。 • &nbsp;用户无需安装（或者卸载）一个小程序。在我们的研究中，许多用户都提到了这个功能，并认为这有助于节省手机存储空间。 • &nbsp;小程序的发现渠道主要是线上的社交分享和线下的二维码扫描。许多小程序鼓励用户向其他用户分享游戏，以便在游戏中获得奖励（比如，额外的生命值或者奖励点）。线下，带有二维码的广告可对小程序进行推广。例如，一家购物中心为一个预付停车费的小程序做了广告。 万达广场（购物中心）为一个小程序做的广告，以帮助用户预防停车费。 • &nbsp;小程序可通过微信主页进行访问，但默认是隐藏的。因为微信的主要功能是聊天，主页专用于最近的聊天对话。要查看小程序的话，用户需要从顶部向下滑；通过这个操作可以显示最近使用的小程序列表。尽管对于常用的小程序用户来说，滑动既简单又方便，但新用户或者不常用的用户则不太可能自己发现小程序，除非他们不小心向下滑动或者其他用户向他们分享了一个小程序。 在微信主页（左边），用户可向下滑动以查看最近使用的小程序列表（右边）。 我们的研究提供了一些设计师在应用中，或者其他类似于微信的集成模型的有限平台场景中开发应用时可运用的见解。 从微信小程序中学到的关于用户体验的 5 个经验1. 保持用户期望的核心功能和内容。已经使用过你的公司的（完整的） app 的用户对你所提供的内容和服务有了心理模型和期望。如果一个应用的小程序版本让用户很难找到他们想要的核心内容，他们将会使用他们更熟悉的 app。在我们的测试中，一位 36 岁的女性用户抱怨说，京东购物小程序的主页不如京东移动 app 中提供的信息丰富：“在移动 app 的主页上，我可以浏览打折信息（她在顶部的轮播图之间滑动）。它还显示了我浏览过和购买过的东西，并且推荐了更多相似的商品。所有这些信息都不会在小程序中显示。”她认为小程序中的内容更少，所以她不想在上面购物。 京东购物小程序（左边）和京东移动 app（右边）的对比表明了，移动 app 中可浏览的内容更多，包括轮播图、促销信息和更多模块。 另外一名用户，一位 24 岁的女性，在使用提供食物配送服务的美团小程序时也有类似的问题。“当我打开 app 时，我要做的的第一件事就是获得一些优惠券。这个应用会在你每次登录时自动显示一些优惠券，我不知道小程序是否也会这么做。”她打开小程序，然后非常失望，“没有，没有任何优惠券。这些都太贵了。而且，轮播图中展示的促销活动也不像公司 app 中那么多。” 如果一个小程序无法做到移动应用中能做到的一切，那么它应该支持切换──这是用户在小程序和移动 app 或网站之间移动以便查看完整内容的一个方便途径。 2. 始终考虑使用环境。在移动设备上，支持快速操作，并且为中断而设计。在我们的研究中，很多人抱怨说，如果他们在使用小程序的过程中收到了微信消息，他们无法方便地查看信息，然后再回到小程序中继续他们的任务。相反地，他们不得不退出小程序以查看消息。 不幸的是，一些小程序未保存用户的进度，而是强制他们再次重新开始任务。因为，微信的核心是一个社交工具，小程序应当为了适应多任务处理而设计。为了最大限度降低中断的可能性，流程应当高效、且交互成本最小。以下是实施这些原则的一些建议： • &nbsp;保存用户的进度，以便他们稍后可以返回到任务中。一个叫做 Happy Ball 的赛车小游戏允许用户保存他们的进度，并在稍后再次返回游戏。一位 20 岁的男性用户称赞了这一功能：“我主要在公共交通工具上或者在课堂上感觉无聊时玩这个游戏，都是碎片化的时间。这个功能允许我中断游戏，并且再次返回时不会丢失我的信息，这一点非常好。” • &nbsp;向用户发送提醒，以便用户回到他们离开的地方继续任务。因为知道用户在支付的过程中可能会被打断，所以当用户在未完成任务的情况下离开京东小程序的支付页面时，京东将在大约半天内向用户发送一个微信提醒。对于忘记了他们的购物车里还保留有商品的用户，这种类型的提醒非常有帮助。 如果用户离开了京东购物小程序的支付页面，京东的微信账号将发送一个提示消息，提醒用户购物车里仍有商品。 • &nbsp;通过获取微信账号的数据提供良好的默认值，以最大限度减少用户的工作量。例如，京东小程序的支付页面会自动填充用户信息（地址和电话号码），因为京东的账号连接到了用户的微信账号。因此，即使是第一次打开京东小程序的用户也可以享受「一键支付」，而无需输入他们的详细信息。 3. 利用平台的核心功能。许多用户提到，他们对大部分小程序和小游戏的了解来自于群聊或者好友。一个好的小程序会利用微信的核心功能，即通信。例如，京东的小程序甚至比移动 app 更能促进主页上的团购。（如果有足够的人同意购买这件商品，团购将对这个产品提供折扣。如果一个商品没有得到足够的订单，就没有人可以获得这个产品。）在微信这个环境中强调团购非常有意义，因为这个平台使得用户可以很方便地与他们的好友分享链接，然后邀请他们参与团购。鼓励用户分享对你的业务是有好处的，但别过度。在我们的测试中，许多用户抱怨说，小程序，特别是小游戏，强迫他们向其他用户分享内容。参与者解释说，“如果我需要通过分享游戏来获得奖励，并继续玩下去，我甚至宁愿不要奖励，”并且“强制分享是最糟糕的。”一位 20 岁的男性用户说，“如果你的内容真的非常好，人们会主动分享的──不要像传销一样强迫我分享。” 4. 设计小程序需考虑不常使用的用户。我们的许多研究参与者说，他们更喜欢那些提供他们仅偶尔使用的服务的小程序，以节省手机空间。例如，一个用户解释说：“如果我一个月只需要使用一次这个功能，我会使用小程序。例如，干洗。我不需要下载一个用于干洗的应用。我只需要使用小程序就好了。”设计师应当了解偶尔使用的用户的需求，并在小程序中直接解决它们。 用于邮政运输的顺丰快递小程序就是一个很好的例子。与更全面的移动 app 相比，这个小程序通过围绕最常用的用户任务（安排收件时间）进行设计，解决了用户偶尔使用的需求。 顺丰快递的小程序（左边）的主要功能是收件时间安排，这是偶尔使用该服务的用户的主要需求；相比之下，相应的移动 app 则具有更多的功能。 不常用用户需要极高的可用性，并强调快速学习，因为您不能设想用户将通过长期使用来积累关于设计的知识。传统可用性准则也适用于小程序，以下是我们研究中的一个例子： • &nbsp;设计简单的导航以实现易学性。例如，家乐福的小程序在导航栏中使用了图标和文本，这对老年人来说很友好。一位 55 岁的男性用户，他甚至不知道如何搜索一个小程序， 但他可以轻松地在这个小程序中浏览不同的类别和商品，因为它足够简单直观。 家乐福的小程序使用清晰的导航、图标和大图片；这些特点有助于新手用户和年长用户的使用。 5. 支持无缝的跨渠道转换。客户可通过不同的渠道与组织进行交流：移动应用，移动网站，桌面网站，微信小程序，微信官方账号，等等。设计师应该考虑客户的整个使用流程，提供一个跨渠道的无缝用户体验。 • &nbsp;简化渠道转换。一个很好的例子是，当用户想要的商品恢复库存时，京东商城是如何提醒用户的。由于与微信官方账号不同，小程序无法发送通知，所以京东小程序提供了相应的京东官方微信账号的二维码；通过关注这个账号，用户便可接收来自京东的消息，并知道他们的商品何时有货。在我们的测试中，一名用户按照这个流程收到了他打算订购的 VR 眼睛的通知。他评论说，“这家公司考虑非常周到。” 如果用户对小程序中某个不可用的功能感兴趣，京东商城小程序将引导用户使用另一个不同的渠道（京东的微信官方账号）（当商品恢复库存时可收到通知）。 • &nbsp;在要求用户切换到另一个渠道之前，先提供一些内容。在渠道之间切换会带来很高的感知成本：用户需要相信为了实现这种转换而付出的努力是值得的。在我们的测试中，一个小程序要求用户关注该公司的微信账号，以获取更多关于其产品的信息。由于这个请求过早（她只是刚刚打开小程序并点击了一个按钮），于是她立即退出了这个小程序。 在用户刚打开程序并点击了主页上的一个按钮之后，这个小程序就要求用户关注该公司的微信账号。一个研究参与者直接退出了这个小程序。 • &nbsp;提供切换渠道的简单路径。在我们的研究中，一位 37 岁的女性用户非常喜欢一个叫做 Heika Camera 的小程序，它可以美化她的猫的照片。她想要下载手机应用，但是她在小程序中搜寻之后，却找不到任何可以访问移动应用的途径。 总结微信小程序是一种新的互动渠道；像这样的新渠道可能随时随地出现。设计师必须保持敏锐，并调整他们的产品以适应这种新的互动方式。为了利用这些新机会，了解它们的优势和局限非常重要。如果你发现自己在应用程序中设计应用程序，或为功能有限的渠道（例如，智能手表、语音助手）进行设计，请记住以下几点：• &nbsp;根据使用环境和使用频率为产品增值。• &nbsp;考虑切换渠道的成本以及如何使转换无缝。• &nbsp;为该平台的用户提供内容和视觉效果。 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>用户体验</tag>
        <tag>NN/g</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 界面设计中的「变化盲视」]]></title>
    <url>%2F2019%2F05%2F03%2F%E8%AF%91-%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E3%80%8C%E5%8F%98%E5%8C%96%E7%9B%B2%E8%A7%86%E3%80%8D%2F</url>
    <content type="text"><![CDATA[原文：Change Blindness in UX: Definition作者：Raluca Budiu (2018-09-13)阅读时长：9m42s 摘要：由于人类注意力的局限性，当网页缺乏强有力的线索时，网页中的重大变化可能会被忽略。 变化盲视的定义在可用性测试中，我们经常观察到，用户忽略了屏幕上的一些变化，而设计师却认为这些变化是显而易见、令人瞩目的。在可用性方面，如果您从事的是设计工作，那么您就知道要寻找什么，在哪里寻找它，它何时出现以及它意味着什么。因此，这对您来说是显而易见的，当您查看您自己的设计时，您不会错过一个重要信息或数据对象的出现。但用户经常这样。为什么？因为变化盲视，这是人类（和史前人类）感知的一个有百万年之久的事实，并且不太可能在短时间内消失。 那么什么是变化盲视呢？在阿尔弗雷德 · 希区柯克（Alfred Hitchcock）的《惊魂记》（Psycho，有史以来最著名的电影）中，侦探 Arbogast 看着 Norman Bate 的房子投射在漆黑无云的天空里。镜头回到侦探的脸上，并跟着他朝屋子走去。场景仍是黑暗的，但天空却突然布满了云彩。 不论天空纹理的变化是有意为之（或许是希区柯克对即将发生的事的微妙警告）还是只是一个连续性的错误，大多数观众都不会注意到它。在一个场景与下一个场景之间，动态影像经常会出现像这样细微的不一致，比如背景的变化，演员的服装、妆容或位置的变化，但这些在不同场景之间切换时发生的变化通常都会被忽略。 这种现象被称为「变化盲视」，并且超出了电影的范畴。它适用于通常情况下人们对场景的感知，不管是在屏幕上还是在现实生活中。变化盲视的作用非常强大：即便人们已被警告可能发生变化，场景中的变化也可能不被察觉。 定义：变化盲视指的是，当一个场景的变化发生在远离人们的关注焦点的区域时，人们倾向于忽略这些变化。 在心理学中，20 世纪 90 年代中期进行的一系列实验可能是对变化盲视最好的说明了。在这些实验中，参与者被要求观看一幅复杂场景的图像，时间为半秒；然后显示器空白了一小会儿，最后又出现相同的图像。然而，第二次显示画面时，一些细节被修改了，比如，一个对象改变了尺寸、颜色或者添加或移除了一个元素。实验参与者被要求识别这两幅图像中的变化。在其中一些研究中，人们多次循环查看这两个版本，直到他们察觉出这些变化。对许多人来说，要经过 20 或 40 次交替才能找出它们。 显示器的闪烁（一个场景，接着是空白屏幕，接着是看起来相同的场景）是变化盲视的一个重要组成部分。在电影中，场景的切换起到了闪烁的作用；另外，在与计算机交互时，闪烁则由用户按下按钮之后新页面（或 UI 元素）的加载引起。但事实证明，闪烁并不是绝对必须的，当用户眨眼或正在扫视（当她移动视线至屏幕上另一个区域）时，此时发生的场景变化也很容易导致变化盲视。 魔术师利用人类在眼睛移动时的变化盲视倾向：他们使用吸引注意力的装置来使观众的眼睛移动到那个位置，同时进行对他们的戏法至关重要的未观察到的动作。 为什么会发生变化盲视？变化盲视发生的最根本原因是我们注意力的局限性。任何复杂的场景都有着大量的细节，人们很难也无法高效地注意到所有这些细节。我们经常采取的方式就是走捷径。 变化对于人类来说一直都很重要，它可以传达与我们的环境相关的重要信息。自然界中的大多数变化都是由运动来实现的（除极少数比如变色龙的特例之外，一个物理对象无法在不涉及运动的情况下立即发生改变），并且，人类的周边视觉很容易察觉到运动。一旦人眼检测到周围的运动，他们就会寻找运动的来源，此时中心视觉开始起作用，并提供补充的、详细的信息。这种行为是我们野外生活的遗留物，在野外，任何运动都可能是捕食者正准备猎杀我们的信号。 当运动作为变化的提示线索比较微弱或者完全不存在时，就会产生变化盲视。当屏幕闪烁时，运动就被分解了，我们看到的是场景的两个静态版本。找出变化的唯一方法是，检查前后版本中所有相应的元素并进行比较。这项任务是很困难的，不仅因为检查场景中无数小细节是乏味的，而且我们对于场景先前版本的记忆也可能很差。事实上，我们很可能根本就没注意到那个场景中的大部分元素。 但变化盲视也可能发生在眼球运动过程中。换句话说，如果两个（可能运动暗示的变化）相互竞争──就像魔术表演中一样，一个变化通常会获胜并吸引眼球，但眼球运动阻止了对第二个变化的检测。这一原因在界面设计中尤为重要。 界面设计中的变化盲视在与用户界面的正常交互中，当一个新的元素（比如产品图片轮播中的不同图片或者下拉菜单中的内容）作为用户操作的结果出现在屏幕上，而屏幕上其它区域也同时发生变化时，常常产生变化盲视。用户预料中的变化的位置在于直接响应用户操作的那个可见的设计元素，于是用户朝那个方向移动视线──但实际上，变化分散在屏幕上多个不同的区域。 例如，当用户点击 Aldiko 的 Android 应用中的汉堡菜单时，他们预期的界面上的变化是与该操作相关的──即，新的元素将会在菜单附近区域显示。他们的视线会停留在那个区域，并且不太可能注意到屏幕右上角的操作溢出按钮已经被一个搜索图标所替代。 Android 上的 Aldiko：打开菜单时，屏幕右上角的控件被一个放大镜替代。搜索工具将一直不被注意到，因为，（1）人们会盯着展开的菜单，这是他们操作的直接结果；（2）他们期望屏幕上其它所有元素保持不变（就像他们与大多数用户界面交互时一样）。 在其他地方，我们曾讨论过为什么桌面端的搜索框不应该被一个搜索图标所替代；然而，在移动屏幕上，这种模式是更有用的，我们的研究表明，即使没有搜索框，放大镜工具也相当容易被发现。但是，如果搜索框在默认情况下不可见，那么当用户点击搜索图标时，文本输入框应该显示在其旁边（而不是屏幕上距其较远的区域），以确保人们不会错过它。 Texas A&amp;M 大学不仅用搜索图标来代替搜索框，而且还在距离搜索图标很远的位置显示搜索文本框。主页横幅的动画与搜索框的显示是具有竞争性的。 John Hopkins 大学也使用了一个动态的主图，并将搜索隐藏在一个图标下。但至少，它在搜索图标附近显示搜索框，并将动态的背景调暗，以降低动画的竞争性。 出现在页面顶部的半持久性导航栏或者浮动的按钮也存在不被发现的危险，因为页面的滚动常常会掩盖它们。例如，当用户向上滚动页面时，半持久性导航栏出现在屏幕顶部，希望人们会注意到这个导航栏，并从中选择一个选项，而不必向上滚动至页面最顶端。但不幸的是，页面的运动很容易掩盖导航栏的出现引起的运动，尤其是当导航栏的颜色与页面的颜色混合在一起时，就像下面 New York Times 的例子。 iPhone 上的 NYTimes：当他们开始向上滚动时，人们可能会忽略出现在屏幕顶部的半持久性导航栏，因为他们正专注于页面的滚动。一个加剧这种现象的因素是视觉效果上，导航栏与页面内容的差异不够明显。 Chicago Tribune 的移动网站也使用了一个半持久性导航栏，当人们开始向上滚动时，它就会出现在页面顶部。但是，在这个例子中，导航栏的视觉设计效果使它更突出了。 （我们的周边视觉负责识别运动和阴影。比起一个元素微妙地与页面其余部分混合在一起，并且未显著改变页面的阴影轮廓，当一个页面的阴影轮廓发生变化时──比如因为一个角落里出现了大块对比色──我们更容易注意到它的出现。） 还有很多其他方面的设计可能受变化盲视所影响──错误消息或其他通知、出现得太快的结果、或因此现象仍可能被忽略的变化的导航栏，正如我们在同个话题的相关文章中所讨论的那样。 如何避免界面设计中的变化盲视为了避免变化盲视，请对你的设计进行分析，以确定那些可能同时发生并且会分散彼此注意力的竞争性变化。以下是一些实践的技巧： 一次只做一个变化。在上面 Aldiko 的例子中，可将搜索放置在右上角，并始终可见。 将所有同时发生变化的元素归在一起，并放置在屏幕上同一个区域内，以确保该运动可吸引对所有这些元素的注意力。例如，Aldiko 设计中另一个简单的解决方案是，将搜索移到菜单中。（但请注意，将搜索隐藏在菜单中会严重影响其可发现性，并且可能仅适用于以浏览为主的网站。） 使用动画来表示变化，但避免在屏幕上使用过多互相竞争的动画，以免分散注意力。 将屏幕上未发生变化的区域调暗，以聚焦用户对变化的注意力。 如果你打算在用户滚动页面时向页面中添加浮动的元素，那么请将它们显示在用户的关注焦点附近（例如，在页面底部放置「返回顶部」按钮），并使用与页面其余部分形成对比的颜色。 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>用户体验</tag>
        <tag>NN/g</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 正确使用标签页]]></title>
    <url>%2F2019%2F05%2F03%2F%E8%AF%91-%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E6%A0%87%E7%AD%BE%E9%A1%B5%2F</url>
    <content type="text"><![CDATA[原文：Tabs, Used Right作者：Jakob Nielsen (2016-07-09)阅读时长：6m30s 摘要：遵循以下 12 个选项卡控件的设计指南，以区分选项卡和网站导航，并解决点击不确定性问题。 简单的 GUI 窗口小部件是网页中大多数功能的基本构件，但却很难找到正确使用所有对话控件的网站。即使是像单选按钮和复选框（右键在新标签页打开译文）这样简单的东西，也有一半的时间是被错误使用的。甚至我们都还没开始讲下拉菜单，这也是可怕的滥用。本文讨论的是另一个经常被滥用的设计元素：选项卡。（这里，我讨论的是页面内的选项卡，如下面的几个截屏示例所示。这些是你可以自己设计的选项卡，作为你的网站或基于 web 的应用程序的一部分。另一种不同类型的选项卡被用于浏览器框架，它允许用户在浏览器中同时打开多个页面。在本文中，我不讨论浏览器选项卡。） 选项卡可用性指南下面是使用选项卡的 12 个设计原则： 使用选项卡在同一上下文的视图之间切换，而不是导航到不同的区域。这是最重要的一点，因为在切换视图时保持原位不变是我们使用选项卡的首要原因。 按一定的逻辑将内容分到不同的选项卡下，这样，用户便能轻松预测到选择一个给定的选项卡后会看到什么内容。（卡片分类法是研究这种「mini-IA」问题的一种方法。如果你无法找到明确不同的分组，那么选项卡可能是管理你的内容的错误界面控件。） 当用户不需要同时查看多个选项卡中的内容时，才使用选项卡。如果用户确实需要比较不同选项卡下面的信息，那么不得不来回切换将会增加他们的短期记忆负担，增加认知负担和交互成本，并降低可用性，相比于把所有内容都放在一个大页面中的设计。 设计本质上平行的选项卡。如果选项卡明显不同，用户会将它们理解为网站导航。 Workday 的主页使用了选项卡控件来呈现它的服务和应用。第一个选项卡 About Workday 提供了公司的概况，而其他的选项卡描述了公司提供的服务。最好是移除 About Workday 这个选项卡，以保持选项卡的平行。 高亮显示当前选中的选项卡。确保高亮显示足够突出，以便人们可以辨别出哪个选项卡是选中的。 Ticketmaster 的选项卡控件通过去掉填充颜色来突出显示当前选中的选项卡（Just Announced），如果有至少 3 个选项卡，则可以使用这个方法。但如果只有 2 个选项卡，这将很难判断出哪个是选中的。 除了高亮显示，你还可以通过尺寸，加粗文字，加上图标或者使它显示在其他选项卡前方等方法来标记当前选中的选项卡。如上述例子所示，如果只有 2 个选项卡，那么这种附加的信号将非常重要。 未选中的选项卡应该清晰可见、可读，以提醒用户有其他的选项。如果非高亮显示的选项卡太融入于背景，那么用户可能永远都不会点击它们，也永远都不会发现那些隐藏的功能。 将当前选中的选项卡与它的内容区域联系起来，就好像您正在使用几个粘贴有选项卡的物理索引卡一样。这将强调当前正显示哪个面板，并在只有 2 个选项卡的时候，告诉用户哪个选项卡是被选中的。 Traveler 的选项卡控件中，选中的选项卡和面板区域使用了相同的颜色。这个设计加强了选项卡及其相关内容之间的联系，这也是支持使用反向高亮显示的原因之一。 编写简短的选项卡标签，并使用简单明了的语言，而不是自创的术语。选项卡标签通常为 1~2 个字。短标签更易于扫描；如果你需要更长的标签，则表明这些选项对于一个选项卡控件来说过于复杂了。 选项卡标签不要使用全部大写。因为更难阅读，所以全部大写基本不会是一个好方法。可读性对于单个、简短的单词来说并不重要，但，正如「主页可用性设计指南」中提到的，你应该选择一种大写的形式（无论是句型还是标题式大写），并坚持使用。 只使用一行选项卡。多行会造成 UI 元素的跳跃，破坏空间记忆，从而造成用户无法记住他们已访问过哪些选项卡。此外，多行也是过度复杂的一个症状；如果你需要超出一行的选项卡，那么你应该简化你的设计。 将一整行选项卡放置在选项卡面板的顶部，而不是旁边或者底部，否则用户会忽略它们。从视觉设计上看，选项卡控制的范围应该是显而易见的。打个比方，使用选项卡就像在一个老式卡片目录的抽屉里翻阅索引卡一样，因此用户必须能够一眼就看出是什么构成了一个「索引卡」（即选项卡面板）。 Reuter 主页上的市场部分，使用了边框来显示选项卡控制的范围。 选项卡的外观和作用应该总是一致的。一致性在 GUI 控件设计中很重要，因为它通过以下几种方式构建起用户对界面的掌控感： 可识别性。当一件东西看起来总是一样的时候，你就知道应该寻找什么，并且知道当你找到它时会看到什么。 可预测性。当一件东西总是以相同的方式运作时，你就可以知道当你触发它时会发生什么。 赋予权力。当你可以依赖于你过去对所有可用功能的了解时，你就可以轻松地进行一系列操作来实现你的目标。 效率。没有必要花费时间去学习新的东西或者担心特性不一致带来的影响。 总结在图形用户界面设计中，选项卡可能看起来是一个不起眼、无聊的控件。但是，如本文所示，在创建运行良好、易于使用、增强用户体验的选项卡时，存在许多特定的设计上的问题。 当使用分析技术对一个 UX 运行状况进行检查时，选项卡的设计问题是一个常见的调查结果。假设你正在对页面内的操作进行跟踪，你可能会发现，用户很少使用某些页面上的选项卡。检查你是否违反了本文中的任何一条设计准则。如果是的话，你很可能就是罪魁祸首，并且你可通过快速的 A/B 测试变成英雄，这个测试通常会显示重设计的选项卡的两次使用，以使其符合标准。 如果你遵循了本文中的设计准则，用户将知道如何使用你的选项卡，而无需进一步探索或进行易错的猜测。这也意味着他们可以将所有的时间和精力用于理解你在这些选项卡下提供的内容和功能。选项卡本身没有任何价值，但当它们不是吸引注意力而是促进用户对内容的访问时，它们将发挥重要的作用（在满足用户体验和业务目标方面）。 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>交互设计</tag>
        <tag>NN/g</tag>
        <tag>导航</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 网站上的面包屑导航：什么、何时与如何]]></title>
    <url>%2F2019%2F05%2F03%2F%E8%AF%91-%E7%BD%91%E7%AB%99%E4%B8%8A%E7%9A%84%E9%9D%A2%E5%8C%85%E5%B1%91%E5%AF%BC%E8%88%AA%EF%BC%9A%E4%BB%80%E4%B9%88%E3%80%81%E4%BD%95%E6%97%B6%E4%B8%8E%E5%A6%82%E4%BD%95%2F</url>
    <content type="text"><![CDATA[原文：Breadcrumbs For Web Sites: What, When and How作者：Nick Babich (2016-08-17)阅读时长：7m38s 面包屑导航（breadcrumbs 或 breadcrumb trail）是一个二级导航系统，用于显示用户在一个网站或 web app 中的位置。这个词来源于 Hansel 和 Gretel 的童话故事，故事中的主人公通过用面包屑制造的一串踪迹找到了回家的路。 与这个童话故事一样，访问者需要知道他们在网站层次结构中的位置，以便浏览到层次结构中更高级别的内容。在本文中，我们将探讨如何在网站上使用面包屑，并讨论一些将面包屑导航应用到您自己的网站的最佳实践。 面包屑导航越来越有用面包屑可用作有效的视觉辅助，指示用户在网站层次结构中的位置。此属性使面包屑成为用户获取上下文信息的主要来源，并帮助他们找到以下问题的答案： 我在哪里？面包屑告知访问者与整个网站层次结构相关的他们的位置。 我可以去哪里？面包屑可提高网站特定部分和页面的可寻性。网站的结构放在面包屑中比放菜单中更容易理解。 我应该去那里吗？面包屑传达内容价值，并鼓励浏览（例如，电子商务网站的访问者可能会访问一个产品页面，虽然该产品可能不是很匹配，但访问者可能希望浏览来自同一类别的其他产品）。反过来，这会降低网站整体的跳出率。 • &nbsp;减少操作次数在可用性方面，面包屑减少了网站访问者为了访问更高级别的页面而需要采取的操作的次数。访问者可使用面包屑来返回更高级别的页面，而无需使用浏览器的「后退」按钮或者网站的主导航。 • &nbsp;占用最小的空间一个紧凑的结构形式无需占用太多的页面空间，因为它只是横向的一行带有链接的文本。好处是它们在内容加载方面几乎没有负面影响。 • &nbsp;没有用户会在使用面包屑时遇到问题人们可能会忽略这个小小的设计元素，但他们从不会误解面包屑或者在操作它们时感到困难。 何时该使用面包屑导航确定一个网站是否会从面包屑中受益的好方法是，绘制站点地图或者表示网站导航结构的示意图，然后分析面包屑是否会提高用户在类别内和类别之间导航的能力： 当你有大量以严格的线性结构或者具有自定义类别的层次结构组织的内容（例如，可将其划分为可划分为更多子部分的部分）时，您应该使用面包屑。一个很好的场景是电子商务网站，其中各种各样的产品可按逻辑分为不同的类别。 对于不具有逻辑层次或分组的单级网站，不应使用面包屑。 面包屑导航的类型面包屑可以基于位置、路径或属性。 1. 基于位置的面包屑基于位置的面包屑代表着一个网站的结构。它可以帮助访问者理解和浏览网站具有多个级别（通常两个以上）的层次结构。对于从外部源（例如，搜索引擎结果页）进入网站更深层次的访问者来说，这种类型的面包屑具有非常大的支撑作用。 基于位置的面包屑导航。图片来源：marketingland 在下面的例子（来自 BestBuy）中，每一个文本链接都对应着一个比它右边的页面更高一级的页面。 来自 BestBuy 的基于位置的面包屑导航 2. 基于路径的面包屑基于路径的面包屑（也称作「历史记录」）显示了用户访问某个特定页面的整个路径。这种类型的面包屑链接通常是动态生成的。有时候，基于路径的面包屑很有帮助，但大多数时候，它会令人感到困惑──访问者通常会漫不经心地浏览，从一个页面跳到另一个页面。这样一个曲折的路径对于用户而言，并没有太大的帮助，而且很容易由浏览器中的「后退」按钮来替代。最后，对于那些直接到达网站中深层级页面的访问者来说，历史记录是没有用的。 下面是一个基于路径的面包屑导航的链接示例，它显示了导航到目标页面的两条路径。 基于路径的面包屑导航。图片来源：Oracle 3. 基于属性的面包屑基于属性的面包屑列出了可跳转至特定页面或最常见产品的类别──因为这种类型的面包屑对电子商务网站非常有用。这种面包屑有助于访问者理解产品之间的关系，并提供了一种不同的方式。 基于属性的面包屑导航。图片来源：marketingland 例如，在 TM Lewin 网站中，面包屑导航显示了某一个特定页面上的展示的所有项目的属性： 这个页面显示了所有的具有「Slim Fit」属性的西装。图片来源：T.M. Lewin 层次结构还是历史记录？根据经验法则，面包屑应该显示网站的层次结构，而不是用户的历史记录。因此，使用基于位置或基于属性的面包屑，而不是基于路径的面包屑。 面包屑的最佳实践在设计面包屑导航时，请记住以下几点： 1. 不要使用面包屑代替主导航面包屑导航应该被视为一个额外的功能，而不是取代有效的主导航菜单。请记住，这是一个便利功能；一个辅助导航方案；另一种可选择的在网站中导航的方式。 Apple 使用面包屑导航来支持主导航 2. 导航中不应包含当前页面的链接面包屑导航中的最后一项（用户当前的位置）是可选的──如果要显示它，请确保它是不可点击的。由于用户已经在此页面上，所以将当前页面的链接添加到面包屑导航中不具任何意义。 3. 使用分隔符面包屑导航中，用于分隔链接的最容易辨认的符号是「大于」符号（&gt;）。通常，「&gt;」符号用于表示层次结构，如「父类别 &gt; 子类别」格式中的一样。其他可使用的符号是指向右边的箭头（→），直角引号（»）和斜杠（/）。符号的选择取决于网站的美观程度和使用的面包屑类型： 图片来源：Dribbble 图片来源：Dribbble, Oleg Frolov 4. 选择适当的尺寸和间距在设计时请仔细考虑目标尺寸与边距。不同面包屑级别之间应该有足够的间距，否则人们使用起来可能会比较困难。但同时，面包屑又不应在页面中占据主导地位，因此它们应该不如主导航菜单突出。 5. 不要使它成为设计的焦点不要使用花哨的字体或者鲜艳的颜色，因为这样做将失去使用面包屑导航的意义。在设计面包屑的尺寸和样式时需要遵循的一条经验法则是，它不应该是进入页面时吸引用户注意力的第一项内容。 下面例子中的面包屑导航设计得还不错，但它太引人注目了，可能会分散访问者对主导航和主要内容的注意力。 图片来源：Dribbble Google 的面包屑导航看起来不花哨，但是用户可以轻松找到并使用它。 6. 不要在移动网站上使用面包屑如果您在使用移动设备时觉得需要使用面包屑来进行导航，那么您供移动设备使用的网站设计可能出了什么问题。极有可能是，对于移动设备所提供的特定类型的使用与环境而言，您的网站太复杂了（嵌套太深了）。为了解决这个问题，您应该首先考虑如何使它不那么复杂，所以面包屑甚至都不是讨论的重点。 总结面包屑所做的就是让访问者更容易在网站中进行浏览，前提是它的内容和总体结构具有意义。 这是为数不多的能够提高可用性和用户舒适度的简单方法之一。对于设计上仅占一行空间的控件来说，这已经足够了。 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>交互设计</tag>
        <tag>导航</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 轮播图可用性：为内容过载的网站设计高效的用户界面]]></title>
    <url>%2F2019%2F05%2F02%2F%E8%AF%91-%E8%BD%AE%E6%92%AD%E5%9B%BE%E5%8F%AF%E7%94%A8%E6%80%A7%EF%BC%9A%E4%B8%BA%E5%86%85%E5%AE%B9%E8%BF%87%E8%BD%BD%E7%9A%84%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1%E9%AB%98%E6%95%88%E7%9A%84%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[原文：Carousel Usability: Designing an Effective UI for Websites with Content Overload作者：Kara Pernice (2013-09-14)阅读时长：10m23s 摘要：轮播图允许多重内容占据同一个人人觊觎的空间。这可能会平息公司内讧，但是在或大或小的视窗中，人们通常都会直接滚动页面跳过轮播图。在用户界面中，静态的横幅图片或内容整合展示可能会是更好的解决方案。但如果轮播图就是你的主要元素，良好的导航和内容可以使它更高效。 随处可见的轮播图有很多种不同的 UI 元素，都可被视为轮播图。 例如，可点击的几张图片的幻灯片（如戴尔网站上的） 或者是，展示多个导航标志的动画（如 Nest 网站上的）。 但最普遍的类型是功能区域的轮播图（本文所讨论的），它通常具有以下特征： 出现在主页顶部 占据首屏大部分空间 在同一位置同时显示多个内容 提供一些指示（或导航），表明这个轮播图中有多个特色内容或多帧数 每一帧中都包含了图片和少量文本 包含了关于组织的品牌或使命、特色信息的内容，或由促销活动组成 轮播图最大的优点使用轮播图最大的好处在于，它允许多个内容占据主页上同一块主要区域，这有助于消除任何关于谁的内容最具价值的内部争论。另外一个好处是，使更多的信息显示在可视区域的顶部，因此人们有更大的机会真正注意到它们。 轮播图最大的缺点你无法指望人们会注意到网站或企业内部网上的轮播图中的信息。不管是在 30 英寸还是 3 英寸的显示器上查看内容，人们通常都会直接滚动页面跳过这些图像，并错过其中所有内容，或者至少错过除第一帧以外的其他内容。的确，有一些眼动研究和网络计量学表明某些轮播图获得了大量的眼光停留与点击量。但是，使用轮播图时最需要注意的是，人们经常会忽略它们，以及其中部分或全部内容。 第二个最重要的注意事项是，设计师将轮播图视为一组图片的合辑，而用户通常只关注他所看到的那个图片。从整体上来说，轮播图中的一组图片可以令人对一个组织的作用产生准确的印象。但如果一个用户只看到其中的一张图片，他很可能会对一个组织产生误解。当一张图片描述的是一些反常的事情，或与业务、章程相关性较弱的事情时，这个问题就经常发生。 主页横幅可成为你的网站的视觉主角吗？考虑使用主页横幅代替轮播图如今，多图片的轮播图已经取代了以前网络上随处可见的单个的「主页横幅」。但在某些情况下，成熟的 UI 替代品可能比比它年轻、充满活动的后代产物更适合。原因之一在于，设计师的态度。一个轮播图中有可供选择的多帧图片，所以有机会达成共识或抓住用户的注意力，知道这一点会给设计师一种错误的安全感。他们认为人们会看到轮播图中所有的图片，所以他们会选择一些低质量的粗劣图片，以期弥补信息量的问题。但如果一个设计师只能选择一张图片表达一个观点，他们可能更倾向于选择一些强有力和示范性的东西。这样一来，用户就可真正专注于一个图片，而不是将注意力分散在几个图片中。此外，一个静态的主页横幅比轮播的元素更不容易分散用户注意力，因此可提高人们用于发现站点中其他区域的全局导航的可见性。（附带一提的是，将主页横幅或轮播图中的任何重要信息也放在用户界面中的其他地方，是一个很好的方式，因为这样一来，与 IA 或页面进行交互的人们就有机会看到它。） BestBuy 网站的主页使用了一个主页横幅来展示促销文案「Labor Day Savings Event」，以及销售日期与一个鲜明的黄色动作按钮「Shop Now」。 使 Best Buy 的主页横幅变得有效的原因有以下几点：• &nbsp;电视机、笔记本电脑和冰箱的图片易于辨认，清晰地展示了正在出售的产品。这个主题图片是引人注意的、信息丰富的。• &nbsp;字体、颜色与全局导航和主页眉中的字体、颜色相匹配，所以主页横幅看起来是网站内容的一部分，而不是一个强势的广告。此外，这些特征都有助于传达 Best Buy 品牌，加强宣传他们每天售卖的产品。 轮播图的设计准则如果你决定使用轮播图作为你的主要视觉形式，可遵循以下准则来把它们做好。 1. 一个轮播图只包含 5 帧或 5 帧以下的图片，因为用户不太可能会查看超过 5 帧。在移动设备上滑动浏览多帧图片是很费力的，当帧数超过 5 帧时，用户将很难辨别他们已经浏览过的图片的主题。同时，限制帧数将有助于用户发现内容，并在轮播图中再次找到它。 2. 使用简洁清晰、与组织宗旨一致的文案和图片。阅读字体太小的文本与辨认尺寸过小的图片是很困难的，尤其是在移动设备上。把一个大尺寸、高密度的图片塞进一个小区域中是不合适的。文案与图片越清晰，用户就越有可能注意到并理解其中表达的含义。 Corning Museum of Glass 使用引人注目的图片与高度相关的文案，这些都符合博物馆的工作性质。 Corning Museum of Glass 使用滑动手风琴来显示丰富的图片。 3. 提示用户轮播图中有多少帧图片，以及当前图片所在帧数位置，以提升用户的控制感。 Coldwell Banker 是我们内部网设计 2018 年年度竞赛的 10 个获胜者之一。他们内部网的轮播图设计清晰地展示了重要的信息：一共有 5 帧，每一帧的内容都是必需的，并且很容易识别出哪一帧是当前选中的。 Delta 使选中的点（在屏幕截图的底部）比其他两个点大，但是尺寸差别太细微了，所以不起作用。(给那些辨别不出来的朋友：中间那个是选中的，更大的。) 4. 使用易于理解和识别的图标与链接。导航控件旨在帮助人们识别选项，并在看到主框架中的内容后重新调用它们。例如，用户无法猜测一个数字或一个点点击后会显示什么，但可能记住绿色背景与关于环境的文章相关。在移动设备上，点是特别糟糕的提示，因为人们通常不会注意到它们（而且它们在 Android 比在 iOS 中更不标准）。 5. 确保导航控件在轮播图内显示，而不是在轮播图下方或者通过折叠分开来。这个设计有助于避免大型或小型显示器上的问题。 IBM 提供了一个引人注目的轮播图，轮播中有可点击的图片按钮，但按钮很小，并且按钮上没有描述性的文案。 在 iPhone 上查看时，Shining Star Therapy 网站上的轮播控件被截断了。这种出血效果比完全不显示控件好，但如果能看到完整的控件更好。 6. 如果为每一帧提供一个导航按钮（而不是用于滚动的箭头），请确保每个按钮看起来是不一样的，并且代表所在的那帧。John Deere 的主页提供了带有文字的图片作为按钮，并且显示在轮播图之内，这些都发挥了很大的作用。（同时，它还有可向前向后切换轮播图的箭头。）然而，它的文本非常小，难以阅读，并且对于分配给它们的小空间而言，这些用作按钮的图片过于密集了。 7. 使用足够大的链接与按钮，以便于识别和点击。尺寸小、紧挨着或显示在一个复杂背景上的按钮，将不容易被注意到或点击。 在 Roku 网站上，当所在帧背景为浅色时，轮播图左右侧的箭头很容易被注意到与点击，但是在背景比较复杂的帧中，它们就不够明显了。 滚动后的 Roku 网站。 自动轮播在帧之间自动轮播可引导人们浏览信息。但有些情况下，不推荐使用自动轮播。 如果是以下情况，请勿使用自动轮播：• &nbsp; 你不确定能否把握好轮播时长，以便大多数人在指定的时间内阅读并吸收轮播图中的内容。若轮播得太快，用户将无法读取信息，这对他们来说是令人沮丧的，对于试图突出重点的组织来说也是不好的。若轮播得太慢，则当它们动起来时，用户会对此感到惊讶。• &nbsp; 你的内容与广告相似。用户倾向于忽略看起来像广告的动画（如果他们并没有购物的心态）。我们的眼球追踪研究表明，动画广告的浏览率仅为 27%。 自动轮播的建议• &nbsp;不要在移动设备上使用自动轮播，因为：1. 它降低了页面的加载速度；2. 因为页面很短，用户通常会快速滚动，所以当轮播图切换时，用户可能正往下看，并忽略这个变化。• &nbsp;通过测试得出正确的轮播时长，或者至少估计用户阅读文本和处理图像需要的平均时间。我们以每秒 3 个单词为准则。• &nbsp;不要停在最后一帧。继续循环轮播（并显示所选的帧）。 静态（非自动轮播）的轮播图建议确保对轮播图感兴趣的用户能意识到除了当前显示的图像、内容外还有其他内容。提供清晰的视觉元素，以代表还有更多内容，比如： • &nbsp; 导航链接和图标（如上所述）• &nbsp; 切断，或者使图片“出血”，并显示下一个图片的一部分。 Windows 8 上的 Skyscanner app 将（右侧的）页面内容截断，以表明还有更多内容。 总结如果你正在使用轮播图，以期人们可以看到多种多样的内容，要记住大部分用户只会注意到第一帧，甚至全部都不会注意到。因此，请确保那些重要的内容也被谨慎地放置在 IA 网站上的其他页面中。考虑使用静态的轮播图或主页横幅，而不是自动轮播的图片。此外，在任何轮播图的导航中，都要确保按钮和链接是清晰的，足够大、易于理解和点击的，并且当前选中的那一帧的按钮应该显示为选中的状态。这样，你将创造出一种奇妙的愉悦感，而不是一个恐怖屋。 相关文章：主页横幅的最佳实践为终端用户设计主页轮播图的 10 个要求 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>交互设计</tag>
        <tag>NN/g</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 复选框与单选按钮的 12 个可用性问题]]></title>
    <url>%2F2019%2F05%2F02%2F%E5%A4%8D%E9%80%89%E6%A1%86%E4%B8%8E%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE%E7%9A%84-12-%E4%B8%AA%E5%8F%AF%E7%94%A8%E6%80%A7%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[原文：Checkboxes vs. Radio Buttons作者：Jakob Nielsen (2004-09-27)阅读时长：8m56s 摘要：何时使用复选框控件与何时使用单选按钮控件的用户界面设计指南。关于复选框与单选按钮的 12 个可用性问题。 我最近在一个网站的注册页面中遇到了下面的这个提示框。它至少存在 2 个设计上的错误。在进一步阅读之前，试试你能否找出来吧。 一个网站的注册页面 • &nbsp; 错误一是本文的主要焦点：这里本应使用单选按钮，却错误地使用了复选框。因为上面的两个选择是互斥的，所以这个页面应该提供给用户的是单选按钮，以限制用户准确地选择某一个选项。 • &nbsp; 错误二是这里先提出了两个问题，然后把它们放在了一个又大又冗长的提示框里。在这里，只用一个简短的问题会好很多：「好的，向我发送关于其他特色产品、解决方案、服务和教育机会的信息。」 • &nbsp; 好笑的是，对于单个问题来说，使用复选框是正确的，因为用户将回答「是」或「否」。来自电商网站用户测试报告的建议是，复选框默认不勾选，这样用户就必须主动点击它才能选择接收更多的消息。 何时使用哪个控件自 1984 年第一版《Inside Macintosh》问世以来，复选框和单选按钮的使用规则一直都是一样的。后续所有的 GUI 标准与 W3C 官方的 Web 标准都包含了与之相同的、这两个控件的定义。 当列表中有 2 个或多个互斥的选项，并且用户必须从中明确选择一个选项时，使用单选按钮。换而言之，单击未选中的单选按钮，将取消选中列表中先前已选中的其他任何按钮。 当有一系列的选项，并且用户可选择任意个数的选项（包括 0 个，1 个或多个）时，使用复选框。换而言之，列表中每一个复选框都与其他复选框相互独立，因此选中一个复选框不会取消选中其他复选框。 一个单独的复选框可用作用户可打开或关闭的单个选项。 听起来十分简单，对吧？ 然而，我却经常遇到错误使用单选按钮和复选框的网页。即使已经过了 20 年，还是值得再次提出这些设计准则。 其他设计准则 使用标准的视觉表现形式。复选框应该是一个小方框，选中时带有一个复选标记或一个 X。而单选按钮则应该是一个小圆圈，选中时，圆圈中有一个实心圆。 以组的视觉形式呈现一组选项，并将它与同一页面上的其他组明显区分开。上面的提示框案例就违反了这个原则，因为布局使两个复选框看起来像是单独的主题，而实际上它们是同一个主题的两个可选项。• &nbsp; 使用子标题将一长串的复选框按逻辑分解成不同的组，可使这些选项便于快速扫描，易于理解。这样做的风险在于，用户可能会将每个子组视为一组单独的选项，但这对于复选框来说并不一定是致命的──因为无论如何，每个复选框都是独立的选择。而相反地，单选按钮列表则必须是统一的，你不能使用子标题来分解它。 垂直排列你的列表，每一行仅放置一个选项。如果必须使用一行包含多个选项的水平布局，请确保把按钮和标签分隔开，以便清楚地知道哪个选项与哪个标签匹配。例如，下面这个列表，就很难明白哪个按钮是与选项四匹配的。 一个水平布局的单选按钮列表 复选框标签应使用正向、主动的措辞，以便明确当用户勾选复选框时将会发生什么。换句话说，避免使用譬如「不要向我发送电子邮件」的否定语态，因为这将意味着用户必须勾选这个复选框，以阻止某件事情的发生。• &nbsp; 使用清晰的复选框标签，以便用户了解勾选与不勾选这个复选框分别会发生什么。• &nbsp; 如果你无法做到这一点，最好使用两个单选按钮──一个用于打开这个功能，一个用于关闭它──并且为这两者写上明确的标签。 如果可能的话，使用单选按钮而不是下拉菜单。单选按钮具有较低的认知负荷，因为它使所有选项永久可见，以便用户可轻松地比较它们。对于那些难以进行精确的鼠标移动的用户，单选按钮也更容易操作。（有限的空间有时可能会迫使你违反这个准则，但请尽可能保持所有选项可见。） 始终为单选按钮列表提供一个默认选择。根据定义，单选按钮总是有且仅有一个选项被选中，因此不应呈现没有默认选择的情况。（相反地，复选框则通常默认不选中任何选项。）• &nbsp; 如果用户有可能需要避免做出选择，那么您应该为这个选择提供一个单选按钮，例如一个标签为「无」的单选按钮。为用户提供一个明确的、中性的可点击选项，比要求不从列表中进行选择的隐性行为要好，特别是因为后者违反了总是只选择一个选项的规则。 因为单选按钮总是只需要一个选项，所以要确保选项既全面又清晰。例如，在对年长用户的测试中，他们无法完成一个要求他们选择工作类型的表单，因为它没有提供一个「退休」的选项。如果无法做到全面，则需要提供一个标签为「其他」的选项，并辅以输入字段。 让用户通过点击按钮 / 复选框本身或它的标签来选择一个选项：根据费茨定律，点击目标越大越易于点击。在 HTML 表单中，通过使用「Label」元素对每个标签进行编码，可轻松实现这一点，就像我在上面的水平单选按钮示例中所展示的那样（点击单词「Four」可选中该选项）。（译者注：上面那个水平单选按钮的图片截自原文网页页面，原页面上是可交互的）。在对Flash 中基于 Web 的应用的测试中，我们发现，通过在可视点击区域以外增加一些像素来增大点击区域的话，可使用户的错误远远减少。（这种效果在 HTML 中很难实现，尽管一些 CSS 技巧可能会奏效。） 复选框和单选按钮只用于改变设置，而不是作为动作按钮来使某些事件发生。此外，在用户单击命令按钮（如标签为「确定」，或者「继续进行 XXX（XXX 为进程中的下一步）」）之前，这些更改的设置不会生效。• &nbsp; 如果用户点击了「后退」按钮，则对页面上的复选框和单选按钮所做的任何更改都应被取消，并恢复原有的设置。如果用户点击了「取消」按钮，相同的准则也是成立的（虽然导航网页并不需要「取消」按钮，因为「后退」按钮的作用是相同的）。• &nbsp; 如果用户点击「后退」按钮后，又点击了「前进」按钮，那这种情况按「撤销 - 重做」的顺序来理解是最合适的，这意味着控件的外观应该呈现用户的更改，就像用户从未点击过「后退」一样。在用户点击「确定」或其他相同的命令之前，这些更改仍然不会对后端起作用。 为什么这些准则很重要当我在坚持复选框和单选按钮的正确使用时，我是不是太挑剔了？不。遵循 GUI 标准和正确使用控件有着很重要的可用性原因。 最重要的是，遵循设计标准提高了用户预知控件的功能与操作方式的能力。当他们看到一个复选框列表时，他们知道可以选择多个选项。当他们看到一个单选按钮列表时，他们知道只能选择一个选项。（当然，不是每个用户都知道这一点，但大部分用户都知道，特别是自从 1984 年这成为一个设计标准以来。） 因为许多人都知道如何操作标准的 GUI 小部件，所以正确地使用这些元素可增强用户对技术的掌握感。相反地，违反这些标准则会使用户界面感觉很脆弱──就好像任何事情都可能在没有任何警告的情况下发生一样。譬如说，你猜想你在点击一个单选按钮后是不会立即产生任何影响的，所以你可以在做了一个选择之后、但点击「确定」之前重新考虑你的选择。在这种情况下，如果一个网站违反了这个标准，并且在你输入一个选择之后，意外地使你进入下一个页面，那这将令人感到不快。更糟糕的是，这促使你对在网站上其他地方录入表单时可能会发生的情况产生担心。 复选框和单选按钮最大的可用性问题来自那些含糊不清、具有误导性或者描述了普通用户无法理解的选项的标签。语境线索可缓解后一个问题，但最好还是对任何一组重要的交互控件进行用户测试。幸运的是，复选框和单选按钮都很容易使用纸质原型来进行测试，所以你不需要实现任何东西就可以查看用户是否理解这些标签、并正确使用这些小部件。 没有专业的交互设计师会犯在应该使用单选按钮时却使用复选框的错误。这两个控件之间的区别是任何交互设计课程中首先会教的东西之一。因此，还有正确使用小部件的最后一个理由：如果你不这样做，你将会被视为一个业余爱好者。 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>交互设计</tag>
        <tag>NN/g</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 单选按钮与下拉菜单的 7 个使用原则]]></title>
    <url>%2F2019%2F05%2F02%2F%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE%E4%B8%8E%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E7%9A%84-7-%E4%B8%AA%E4%BD%BF%E7%94%A8%E5%8E%9F%E5%88%99%2F</url>
    <content type="text"><![CDATA[原文：7 Rules of Using Radio Buttons vs Drop-Down Menus作者：Saadia Minhas (2018-05-06)阅读时长：3m43s 不管你正在使用移动应用还是基于网页的工具，表单都是用户界面中至关重要的一部分。同时，表单也是用户交互的最佳来源。用户通过表单录入、提供信息，系统则通过理解这些信息来满足用户需求。 输入控件、输入校验、错误处理、用户反馈等等，都是可用表单中的一些项目。 单选按钮和下拉菜单是其中两个非常重要的输入控件。当用户需要输入时，它们可以互换使用。然而，如果我们仔细研究这两个控件的可用性，很明显，它们都有各自特定的使用场景，以便用户更简单地选择给定的输入。 以下是基于这个可用性研究的一些使用原则，它们将有助于你在设计表单时决定使用哪个控件更合适。 使用单选按钮#1 当需要强调选项时下面是一些需要强调选项的情况：• &nbsp; 没有明确的默认选项或推荐选项• &nbsp; 希望用户阅读所有选项• &nbsp; 用户不熟悉这些选项，并且较少有机会甚至没有机会预知它们 当需要强调选项时 在上面这个例子中，使用下拉菜单并不是一个很好的方案，因为默认选项并没有提供关于其他选项的线索。 #2 当选项少于 5 个时选项较少时最好并排放置，以便：• &nbsp; 用户可轻松快速的浏览所有选项• &nbsp; 提供快速响应，而不是打开下拉菜单后再从多个选项中进行选择 选项较少时 如上面的例子所示，当用户需要从 2 至 4 个选项中进行选择时，使用单选按钮更合适。 #3 当选项之间需要进行明确的比较时可比较的选项最好并排放置，因为：• &nbsp; 用户可对所有选项一目了然，并轻松进行比较• &nbsp; 从下拉菜单中比较和确定选项需要耗费时间• &nbsp; 如果使用下拉菜单，那么用户每次需要检查已选项时，都必须再次打开下拉菜单对选项进行比较 当需要比较选项时 上面这个比较好的例子是，关于用户必须做出严肃决定的订阅计划的选择。 #4 当需要优先考虑可见性和快速响应时清晰的可见性及选项的可快速浏览对用户来说更容易理解。• &nbsp; 对于较长的表单，可更简单快捷地扫描并标记所需选项• &nbsp; 每次都点击下拉菜单去选择某个选项，会耗费很多时间 长表单──Survey Monkey Questionnaire 从上面例子可明显看出，所有可选项对用户可见的长表单提供了更好的用户体验。 使用下拉菜单#1 当默认选项是推荐选项时这种情况下，仅查看推荐选项使用户更容易做出选择，因为：• &nbsp; 显示所有选项将吸引用户的注意力• &nbsp; 不鼓励用户更改默认选项 默认推荐选项 在上面的例子中，用户基本不需要改变默认选项，所以没有必要显示所有的选项。 #2 当有大量相似的选项可选时当有大量相似选项时，推荐使用下拉菜单，因为：• &nbsp; 用户很容易预知这些选项• &nbsp; 用户没有必要并排查看所有选项 大量相似选项 #3 当选项超过 7 个时当选项个数较多时，并不适合并排显示，因为：• &nbsp; 如果一大堆选项并排放置，用户界面将变得杂乱。用户在查看时有可能会感到困惑。• &nbsp; 扫描大量的单选选项需要耗费时间 超过 7 个选项 此外，对于长下拉列表，提供文本输入框是一个不错的方法。用户在其中输入选项名称后，列表仅显示出过滤选项。这将使选择更轻松快捷。 输入选项来过滤列表 总结为提高表单的用户体验，提供正确的控件以便用户输入是非常重要的。由于大量的选项会使表单变得很长，如果用户需要额外点击来输入信息的话，这将变得十分枯燥。以上这些规则将帮助你决定在设计表单时使用哪个控件，单选按钮或者下拉菜单。 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 字符计数器的 6 项设计原则]]></title>
    <url>%2F2019%2F05%2F02%2F%E5%AD%97%E7%AC%A6%E8%AE%A1%E6%95%B0%E5%99%A8%E7%9A%84-6-%E9%A1%B9%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%2F</url>
    <content type="text"><![CDATA[原文：Character count design: some guidelines作者：Jimmy Breck-McKye (2012-05-30)阅读时长：7m22s 字符数限制在互联网产品中无处不在，尤其是在依赖于用户产生内容的应用中。尽管如此常见，字符数限制却总被设计得很糟糕。值得庆幸的是，通过遵循以下 6 个关于输入长度限制设计与字符计数器显示的简单原则，便可使输入受字符数限制的文本变得简单方便。 总的来说，有以下 6 个设计字符有限的文本域的主要准则： 避免对文本输入作字数限制 为字符数限制增加视觉提示 在字数到达限制之前显示字符计数器 允许用户在达到字数限制之后继续编辑文本 允许用户方便地查看所有文本内容，以决定哪些内容需要被删减 为用户的内容输入提供其他渠道 现在，我们依次来看这些原则。 首先，避免对文本输入作字数限制。由于技术或架构上的限制，我们经常被迫需要对输入字数作出限制，因此导致输入变得非常不方便。但除此之外，这些限制毫无必要。有时我们本可以重新设计界面来满足更长长度的文本输入，有时我们草率地对用户如何构建他们的文本作出假设，有时我们并未作深入思考就对字数作了限制。我们要多思考与探寻是否有限制用户之外的其他替代方案。 第二， 为字符数限制增加视觉提示。200 个字符有多长？您能想象得出来吗？300 个字符呢？40 个呢？抽象的数字对于人们来说并不重要，我们很难猜出一个特定的字符限制对于文本输入意味着什么。所以，我们需要为用户提供其他的提示以帮助他们更好的理解内容的最大输入长度，以及他们当前已输入的长度。 有一种方法是，设计尺寸合适的输入区域，以便粗略地表示允许输入的最长文本长度。虽然这很难做到绝对准确（因为 140 个字母「i」将比140 个字母「w」显示的行数更少），但这种方式可为用户提供一个直观的字符限制的感受。例如 Twitter，发帖输入框的尺寸就大致等于输入最大限制字数时的尺寸。 Twitter 的发帖输入框 另一个方法是，当用户的输入接近最大限制字数时，改变字符计数器的颜色。例如 Stack-exchange 网站的评论输入框，当评论字数逐渐增加，计数器从灰色变成金色，最后变成红色。 Stack-exchange 网站的评论输入框 第三，在达到最大字数限制之前，显示字符计数器。您一定不希望用户在提交内容时才发现字数超出限制了，因为这将迫使用户不得不重新思考他们已经输入的内容，甚至是其他他们已经计划好提交的内容的结构。从认知上来说，这将耗费非常大的成本。您一定也不希望用超出字数限制的错误提示来打扰用户，所以，最好从一开始就显示字符计数器。如果计数器使你的设计变得凌乱，可以考虑给它设置一个不显眼的样式，比如灰色，当用户输入更多文字时，逐渐增强它的显眼程度。 第四，允许用户超出字符限制，并且在超出之后进行编辑。有一些字符数限制的设计是，一旦用户输入的文字达到最大限制，就禁止输入更多的文字。这是一个非常糟糕的设计，原因有两个。第一，它打断了用户复制和粘贴的操作；第二，提炼和修改文字内容比在输入完整文字前进行编辑来得更容易。允许用户输入完整的文字内容可帮助用户记住页面上的主要概念，然后开始编辑他们的素材。 第五，方便用户清楚了解哪部分内容是需要被删减的。正如以上第 2 点所提到的，对于用户来说，一定数量的字符数在字数层面上究竟意味着什么是难以理解的。这就是为什么以其他的方式提示用户当前已超出限制的程度是非常重要的。调整输入区域的尺寸，以暗示可输入的内容数量，这是一种不错的方式。但另一种更好的方式是，高亮用户已输入的文本中超出字数限制的那部分。 如下图的例子中，超出字数限制的文字为红色，所以用户可以一目了然哪些内容是需要被删减的。同时，这里还将红色的错误提示信息与触发它的文本联系起来了。 超出字数限制的文字为红色 第六，为用户的内容提供其他的输入渠道。如果用户正在打破字符限制，那么很有可能他正在以一种不恰当的方式使用此输入区域。因此，可以使用字数限制的错误提示引导用户使用更适合他们的内容长度的渠道或者输入区域。 例如，在 Facebook 中，当用户发布过长的 Status 更新时，将会弹出错误对话框，建议用户使用长度不限制的 Notes 功能。这促使用户使用适合冗长日志的 Statuses 功能，而不是专用的日志系统。如果你的用户正在打破字符限制，仅仅是因为他们误解了某一功能的使用目的，那么这个方法将会有所帮助。 用自己的话总结一下，就是：1. 在对文本输入作字数限制前先考虑是不是有其他方案。字数限制，并不是一种很好的方式，你有可能并未对用户的这个输入行为作深入了解，就草率地决定了这个最大限制字数。 2. 为这个「最大限制字数」增加一些视觉提示。单纯地放一个数字「200」对用户来说是比较难理解的，他们并不知道 200 个字是什么概念。增加提示的方式：如，将输入框的初始高度设置为刚好输入最大限制字数时的高度；或者，当用户的输入逐渐接近最大限制字数时，逐步改变字符计数器的颜色。 3. 一开始就显示字符计数器，而不是等到用户的输入超过最大限制字数时才显示。当用户的输入超过最大限制字数时才显示字符计数器的话，用户可能需要重新思考和安排他们已经填好的内容，甚至可能因为这一个修改影响其他本来就已经准备好录入的内容。如果担心你的界面设计因为字符计数器显得杂乱，可以给它设置一个比较不显眼的颜色 (如灰色)，当用户输入更多字数时，再慢慢提高字符计数器的显眼程度。 4. 在用户的输入达到最大限制字数后，也要允许用户继续输入。有一些字符计数器是，当用户达到最大字数限制后，就禁止用户输入了。这是很糟糕的一种设计方式，首先，这样可能使用户复制粘贴的内容被截断；另外，在原本完整的文本内容上进行修改总是比在被截断所以不完整的内容上修改来得容易。 5. 当用户的输入超出最大限制字数时，让用户清晰地知道哪些内容是超出的。例如，第 2 点中，将输入框的初始高度设置为刚好输入最大限制字数时的高度，这样，用户就知道超出这个输入框的部分就是超出的，需要把内容删减到能在这个输入框内完整显示；另一个更好的方式是，将超出最大字数限制的那部分文本变为红色。 6. 如果用户输入的内容超出限定的最大字数，说明他们很可能正在以一种不恰当的方式使用这个输入框，这种情况下，可利用错误信息引导用户改用更适合他们想输入的内容的途径或文本框。 其他相关讨论：字符计数器应该放置在相应文本框的什么位置？ 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[译 | 只有不超过 5% 的用户会调整默认设置]]></title>
    <url>%2F2019%2F05%2F02%2F%E8%AF%91-%E5%8F%AA%E6%9C%89%E4%B8%8D%E8%B6%85%E8%BF%87-5-%E7%9A%84%E7%94%A8%E6%88%B7%E4%BC%9A%E8%B0%83%E6%95%B4%E9%BB%98%E8%AE%A4%E9%80%89%E9%A1%B9%2F</url>
    <content type="text"><![CDATA[原文：Do users change their settings?作者：Jared Spool (2011-09-14)阅读时长：4m15s 早在 PC 时代，我们就对「用户是如何使用软件设计师为他们的应用程序所设计的选项、控件和设置的」这个问题感兴趣了。我们想知道，在多大程度上，用户会自定义他们的应用程序。 为此，我们着手进行了一些试验。我们邀请了大量的用户将他们的 Microsoft Word 的设置文件发送给我们。当时，MS Word 将所有的设置存储在一个名称诸如 config.ini 的文件中，所以我们邀请用户们将这个文件存入硬盘中，并通过电子邮件发送给我们。于是，我们收到了几百份这样的邮件。 然后，我们写了一个程序来分析这些文件，对「有多少用户曾经更改过应用中的 150 多项设置以及他们更改的是哪些设置」进行统计。 我们的发现非常有趣。在我们调研的用户中，只有不到 5% 的用户更改了设置，超过 95% 的用户则保留了应用程序安装时的默认设置。 这令人非常惊讶，因为程序中有一些默认设置是非常重要的。例如，此应用有一个功能是，在你编辑文件的过程中为你自动保存文件，以防在系统或应用程序突然崩溃时丢失任何内容。而在我们分析调查的的版本中，这个功能是默认关闭的。用户必须手动打开它，才能使它生效。 所以，这就意味着，有 95% 的用户是在自动保存功能关闭的情况下使用此应用程序的。当我们对这些用户中的一部分人进行访问时，他们都告诉了我们同一个事情：他们认为 Microsoft 关闭这个功能肯定是有原因的，否则他们为什么要这么设置。还有一些用户告诉我们，「Microsoft 一定知道他们在做什么」。 我们再三思考了这个问题，并且对「将如此重要的一个功能设为默认关闭」的原因进行了猜想。我们猜想，之所以这么做或许是考虑到「用户使用的是软驱或者用户使用的硬盘空间较小运行较慢」，而自动保存会对性能造成影响，所以他们希望为最坏的情况做一些优化，而且，如果用户需要用到这个功能，他们自然会去打开它。 我们有朋友在 Microsoft Office 团队中工作，于是我们向他们询问了将这个功能默认设为关闭的原因，并且提出了我们关于性能优化的这个假设。但他们进行了解之后告诉我们，我们的假设是错的。 事实证明，在该版本中，将该功能默认关闭，并不是因为他们考虑到了用户的需求。相反的，这只是因为一个程序员决定将 config.ini 文件初始化。将一个文件初始化是一个又快工作量又小的工程，所以他就先这么做了，寄希望于之后会有人告诉他实际需要的默认设置应该是什么样的。但是结果并没有人这么做。 由于二进制中 0 代表关闭，所以「自动保存」以及其他一些功能，都被默认设为关闭。用户认为 Microsoft 一定是经过仔细考虑才这么设置的，但事实并非如此。 我们向参与调查的用户了解一些背景资料，比如他们的年龄与职业，以看看是否存在一些区别。但毫无例外，只有一类人几乎总是主动调整他们的设置，这类人就是程序员和设计师。他们会调整应用程序中 40%，甚至多达 80% 的选项。 谁能想到，程序员和设计师们喜欢自定义他们的应用程序。这也许正好就是他们选择这份职业的原因？ （顺便说一句，如果你是一个程序员或者设计师，那么你将和大部人不一样。你习惯于调整你所使用的应用程序 的设置，并不意味着你的用户也会这么做，除非他们也是程序员或设计师。） 在几年的时间里，我们采用不同的形式重复了这个试验。我们发现，用户几乎不调整他们的设置。 如果你的应用程序也有很多设置，你是否曾调查研究过你的用户是如何使用它们的呢？有多少用户调整过这些设置？他们是否仍保持这些选项为默认状态？你的设置界面是否解释了每个设置的含义，并且告知用户为何要调整这些设置？ 以上翻译包含个人理解，仅用于个人学习。如有错误，求指正呀，非常感谢。^^感谢原文作者及所有分享想法与经验的人。^^]]></content>
      <categories>
        <category>译文</category>
      </categories>
      <tags>
        <tag>译文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二零一九年五月]]></title>
    <url>%2F2019%2F05%2F01%2F%E4%BA%8C%E9%9B%B6%E4%B8%80%E4%B9%9D%E5%B9%B4%E4%BA%94%E6%9C%88%2F</url>
    <content type="text"><![CDATA[# 2019.05.01 今天是 2019 年 5 月 1 号，我们的社会依然面临三大严峻问题。治疗胃溃疡的药，不良反应是，胃炎。抗过敏的药，注意事项是，过敏体质者慎用。缓解抑郁症的药，有增加自杀倾向的风险。 # 2019.05.02 今天是 2019 年 5 月 2 号，从朋友圈看当代中国青年的精神境况和生活状态。世界杯。创造 101。权力的游戏。热情一年不如一年。 # 2019.05.03 今天是 2019 年 5 月 3 号，在我的故乡吉林延边二道白河。我看见过。雪往天空里飘。最后落入银河。银河是白色的。 # 2019.05.04 今天是 2019 年 5 月 4 号，实体美颜滤镜的研发是时候提上日程了。无色无味全透明支持个性化定制。参数自定义，想几度美颜就几度美颜。脸型自定义，根据人体工程学设计，完美贴合脸型，一秒穿戴绝无不舒适感。还有日抛型、月抛型和终身型。不用整容，不用化妆，不用美颜。走，我们去创业。 # 2019.05.05 今天是 2019 年 5 月 5 号，喜欢是不能说出来的。一说出来。世界手中就有了你的把柄。 # 2019.05.06 今天是 2019 年 5 月 6 号，世上怎么会有一种乐器生来就催人泪下。就是有这种乐器儿啊。不信。你听一听二胡版的生日快乐歌。保证你快乐不起来。 # 2019.05.07 今天是 2019 年 5 月 7 号，互联网啊，就太不值得严肃了。也是一堆热闹。只有口号。没有价值观。Do the right thing。Don’t be evil。 # 2019.05.08 今天是 2019 年 5 月 8 号，有时候忽然就很想变成别的什么东西。20180723，想变成扑地一声躺倒在雪地里之前的那一段小跑。20180724，想变成广场上往天空飞的发光竹蜻蜓，落至地面前的最后一圈旋转。20180801，想变成像这样的暴雨天里，雨水打在床边的窗户玻璃上发出的嘟嘟声。20180806，想变成凌晨五点五公里跑中的第一个两百米。20180808，想变成我的同事大圣发的朋友圈视频，背景音乐里的第一个钢琴音。今儿，想变成没有，变成不是，变成不存在。 # 2019.05.09 今天是 2019 年 5 月 9 号，大家都是这样。喜欢不说喜欢，爱不说爱，开心不说开心，委屈不说委屈。温馨快乐，僵直模糊。最后谁也没真的开心。 # 2019.05.10 今天是 2019 年 5 月 10 号，时间旅行有回到过去和去向未来两种。如果我们坐上飞机，飞行整整一年，再回到地球上，我们就可以向前穿越 16 秒。如果我们坐上人类目前速度最快的探测器，飞行整整一年，再回到地球上，我们就可以向前穿越 134 秒。这说明，去向未来是完全可以的，只要我们：抖腿的速度足够快。 # 2019.05.11 今天是 2019 年 5 月 11 号，随着时间的推演。到了 21 世纪，人类的手掌就长出了手机。 ——《进化论》 # 2019.05.12 今天是 2019 年 5 月 12 号，一针见血到底是怎么被用来形容一针见血的。一针见血很难吗。你来，你给我一个针。我能针针都见血。 # 2019.05.13 今天是 2019 年 5 月 13 号，你看看你。白马非马的逻辑。和你见缝插针的立场。一样。难看。 # 2019.05.14 今天是 2019 年 5 月 14 号，想回家种土豆。还要把先进的互联网思维带回去。区块链、B2B、社交裂变，统统都得搞起来。真是受不了现在市面上所有的土豆都长一个样。我们种土豆啊，讲究的就是一个工匠精神，设计驱动，要有情怀，不为赚钱。我们要做，就做和别人不一样的土豆，做东半球最大的土豆摊儿。 # 2019.05.15 今天是 2019 年 5 月 15 号，做了一个梦。梦见地球破了个洞。海水都往一边倾斜。天边有两个人在跳舞。]]></content>
      <categories>
        <category>碎碎念儿</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[历经九九八万五千六百七十一难，迎来互联网生涯新高！]]></title>
    <url>%2F2019%2F04%2F21%2F%E5%8E%86%E7%BB%8F%E4%B9%9D%E4%B9%9D%E5%85%AB%E4%B8%87%E4%BA%94%E5%8D%83%E5%85%AD%E7%99%BE%E4%B8%83%E5%8D%81%E4%B8%80%E9%9A%BE%EF%BC%8C%E8%BF%8E%E6%9D%A5%E4%BA%92%E8%81%94%E7%BD%91%E7%94%9F%E6%B6%AF%E6%96%B0%E9%AB%98%EF%BC%81%2F</url>
    <content type="text"><![CDATA[折腾了两天之后，我终于拥有自己的部落格啦！哈哈哈哈哈哈开心！快乐！满足！充满希望！（止不住的膨胀 谁能想到，这个普普通通的周末也许可能就是我这一生中用脑强度最大的两天了。在稀里糊涂地安装了 Git、Node.js、Xcode，新建了 repository，弄完了域名注册实名验证域名解析，各种注册各种设置，各种改样式，各种 hexo c、 hexo g、hexo s、hexo d，各种 error 各种 warning 之后，我终于迎来了自己的个人网站。 辛苦我自己了（高光时刻儿 。 虽然还很简单，但暂时还够用儿，其他的边用边学就好啦。还是要好好学习，好好写文章呐。 感恩 Hexo，感恩 GitHub，感恩互联网，感恩所有分享经验和想法的人儿吖（扑通一声跪下（感恩「简书」不让我改昵称改头像让我有了建站的小动机儿 。 Cowabunga！ 图片来源：动画《探险活宝》]]></content>
      <categories>
        <category>碎碎念儿</category>
      </categories>
  </entry>
</search>
